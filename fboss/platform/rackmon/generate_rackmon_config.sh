#!/bin/bash

prefixtext() {
  infile=$1
  prefix="$2"
  echo "${prefix}// SOURCE: $infile"
  echo "${prefix}R\"__CONFIG__("
  while IFS= read -r line;
  do
    echo "${prefix}$line"
  done < "$infile"
  echo -n "${prefix})__CONFIG__\""
}

gencpp() {
  inf=$1
  outf=$2
  namespace=$3
  func=$4
  if [ ! -e "$inf" ]; then
    echo "$inf does not exist"
    exit 1
  fi
  {
    echo "// Copyright 2021-present Facebook. All Rights Reserved."
    echo "// THIS FILE IS AUTOGENERATED DO NOT MODIFY"
    echo "// GENERATED BY: \`$0 $*\`"
    echo "#include <string>"
    echo "#include <vector>"
    echo "namespace $namespace {"
    if [ -d "$inf" ]; then
      echo "const std::vector<std::string> $func() {"
      echo "  return {"
      for f in "$inf"/*.json; do
        prefixtext "$f" "    "
        echo ","
      done
      echo "  };"
    else
      echo "const std::string $func() {"
      echo -n "  return "
      prefixtext "$inf" "  "
      echo ";"
    fi
    echo "}"
    echo "}"
  } > "$outf"
}

FBCODE_DIR=""
INSTALL_DIR=""
for i in "$@"; do
  case $1 in
    --fbcode_dir=*)
      FBCODE_DIR="${i#*=}"
      shift # past argument=value
      ;;
    --install_dir=*)
      INSTALL_DIR="${i#*=}"
      shift # past argumen=value
      ;;
    *)
      echo "Unknown positional $1"
      exit 1
      ;;
  esac
done

CONFIG_DIR="./configs"
if [ -d $CONFIG_DIR ]; then
  echo "CONFIG: $CONFIG_DIR"
elif [ -n "$FBCODE_DIR" ]; then
  CONFIG_DIR="$FBCODE_DIR/fboss/platform/rackmon/configs"
  echo "CONFIG: $CONFIG_DIR"
elif [ -n "$BUCK_PROJECT_ROOT" ]; then
  CONFIG_DIR="$BUCK_PROJECT_ROOT/fboss/platform/rackmon/configs"
  echo "CONFIG: $CONFIG_DIR"
fi
OUTPUT_DIR="."
if [ -n "$INSTALL_DIR" ]; then
  OUTPUT_DIR=$INSTALL_DIR
fi

NAMESPACE="rackmonsvc"
gencpp "$CONFIG_DIR/interface/rackmon.conf" "$OUTPUT_DIR/GeneratedRackmonInterfaceConfig.cpp" "$NAMESPACE" getInterfaceConfig
gencpp "$CONFIG_DIR/interface/rackmon_pls.conf" "$OUTPUT_DIR/GeneratedRackmonPlsConfig.cpp" "$NAMESPACE" getRackmonPlsConfig
gencpp "$CONFIG_DIR/register_map" "$OUTPUT_DIR/GeneratedRackmonRegisterMapConfig.cpp" "$NAMESPACE" getRegisterMapConfig
