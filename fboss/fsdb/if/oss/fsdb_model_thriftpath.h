// generated by fboss/thriftpath_plugin/facebook/codegen.cpp

// clang-format off
// @nolint

#pragma once

#include <fatal/container/tuple.h>

#include <fboss/thriftpath_plugin/Path.h>
#include <folly/Unit.h>
#include <fboss/fsdb/if/oss/gen-cpp2/fsdb_model_fatal_types.h>
#include <fboss/fsdb/if/oss/gen-cpp2/fsdb_model_types.h>
#include <fboss/agent/gen-cpp2/agent_config_fatal_types.h>
#include <fboss/agent/gen-cpp2/agent_config_types.h>
#include <fboss/agent/gen-cpp2/agent_stats_fatal_types.h>
#include <fboss/agent/gen-cpp2/agent_stats_types.h>
#include <fboss/agent/gen-cpp2/switch_state_fatal_types.h>
#include <fboss/agent/gen-cpp2/switch_state_types.h>
#include <fboss/qsfp_service/if/gen-cpp2/qsfp_state_fatal_types.h>
#include <fboss/qsfp_service/if/gen-cpp2/qsfp_state_types.h>
#include <fboss/qsfp_service/if/gen-cpp2/qsfp_stats_fatal_types.h>
#include <fboss/qsfp_service/if/gen-cpp2/qsfp_stats_types.h>
#include <fboss/platform/sensor_service/gen-cpp2/sensor_service_stats_fatal_types.h>
#include <fboss/platform/sensor_service/gen-cpp2/sensor_service_stats_types.h>


namespace att = apache::thrift::type_class;

namespace thriftpath {


template<typename Parent>
class ChildThriftPath<::facebook::fboss::fsdb::FsdbOperStateRoot, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::fsdb::fsdb_model_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::agent, ChildThriftPath<::facebook::fboss::fsdb::AgentData, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::qsfp_service, ChildThriftPath<::facebook::fboss::state::QsfpServiceData, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::fsdb::AgentData, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::state::QsfpServiceData, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(agent);
    STRUCT_CHILD_GETTERS(qsfp_service);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::AlarmThreshold, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::AlarmThreshold,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::AlarmThreshold,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::temp, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::vcc, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::rxPwr, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::txBias, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::txPwr, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::AlarmThreshold,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(temp);
    STRUCT_CHILD_GETTERS(vcc);
    STRUCT_CHILD_GETTERS(rxPwr);
    STRUCT_CHILD_GETTERS(txBias);
    STRUCT_CHILD_GETTERS(txPwr);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::Cable, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::Cable,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::Cable,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::singleModeKm, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::singleMode, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::om3, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::om2, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::om1, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::copper, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::transmitterTech, Child<::facebook::fboss::TransmitterTechnology, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::length, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::gauge, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::om4, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::om5, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::facebook::fboss::TransmitterTechnology, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::Cable,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(singleModeKm);
    STRUCT_CHILD_GETTERS(singleMode);
    STRUCT_CHILD_GETTERS(om3);
    STRUCT_CHILD_GETTERS(om2);
    STRUCT_CHILD_GETTERS(om1);
    STRUCT_CHILD_GETTERS(copper);
    STRUCT_CHILD_GETTERS(transmitterTech);
    STRUCT_CHILD_GETTERS(length);
    STRUCT_CHILD_GETTERS(gauge);
    STRUCT_CHILD_GETTERS(om4);
    STRUCT_CHILD_GETTERS(om5);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::Vendor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::Vendor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::Vendor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::oui, Child<::std::string, ::apache::thrift::type_class::binary>>,
   std::pair<strings::partNumber, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::rev, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::serialNumber, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dateCode, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::binary>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::Vendor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(oui);
    STRUCT_CHILD_GETTERS(partNumber);
    STRUCT_CHILD_GETTERS(rev);
    STRUCT_CHILD_GETTERS(serialNumber);
    STRUCT_CHILD_GETTERS(dateCode);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::TransceiverSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::TransceiverSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::TransceiverSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::cdrTx, Child<::facebook::fboss::FeatureState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::cdrRx, Child<::facebook::fboss::FeatureState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::rateSelect, Child<::facebook::fboss::RateSelectState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::powerMeasurement, Child<::facebook::fboss::FeatureState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::powerControl, Child<::facebook::fboss::PowerControlState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::rateSelectSetting, Child<::facebook::fboss::RateSelectSetting, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::mediaLaneSettings, ChildThriftPath<::std::vector<::facebook::fboss::MediaLaneSettings>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::hostLaneSettings, ChildThriftPath<::std::vector<::facebook::fboss::HostLaneSettings>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::mediaInterface, ChildThriftPath<::std::vector<::facebook::fboss::MediaInterfaceId>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::FeatureState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::FeatureState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::RateSelectState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::FeatureState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::PowerControlState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::RateSelectSetting, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::vector<::facebook::fboss::MediaLaneSettings>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::vector<::facebook::fboss::HostLaneSettings>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::std::vector<::facebook::fboss::MediaInterfaceId>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::TransceiverSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(cdrTx);
    STRUCT_CHILD_GETTERS(cdrRx);
    STRUCT_CHILD_GETTERS(rateSelect);
    STRUCT_CHILD_GETTERS(powerMeasurement);
    STRUCT_CHILD_GETTERS(powerControl);
    STRUCT_CHILD_GETTERS(rateSelectSetting);
    STRUCT_CHILD_GETTERS(mediaLaneSettings);
    STRUCT_CHILD_GETTERS(hostLaneSettings);
    STRUCT_CHILD_GETTERS(mediaInterface);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::TransceiverConfigOverrideFactor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::TransceiverConfigOverrideFactor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::TransceiverConfigOverrideFactor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::transceiverPartNumber, Child<::facebook::fboss::cfg::TransceiverPartNumber, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::applicationCode, Child<::facebook::fboss::SMFMediaInterfaceCode, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::TransceiverPartNumber, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::SMFMediaInterfaceCode, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::TransceiverConfigOverrideFactor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(transceiverPartNumber);
    STRUCT_CHILD_GETTERS(applicationCode);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::RsFecLaneState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::RsFecLaneState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::RsFecLaneState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::phy::RsFecLaneState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::RsFecLaneState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::RsFecLaneState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HostLaneSignals, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::HostLaneSignals,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HostLaneSignals,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::lane, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dataPathDeInit, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::cmisLaneState, Child<::facebook::fboss::CmisLaneState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::txLos, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txLol, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txAdaptEqFault, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::CmisLaneState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::HostLaneSignals,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(lane);
    STRUCT_CHILD_GETTERS(dataPathDeInit);
    STRUCT_CHILD_GETTERS(cmisLaneState);
    STRUCT_CHILD_GETTERS(txLos);
    STRUCT_CHILD_GETTERS(txLol);
    STRUCT_CHILD_GETTERS(txAdaptEqFault);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::CabledTestPair, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::CabledTestPair,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::CabledTestPair,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::aPortName, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::zPortName, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::profileID, Child<::facebook::fboss::cfg::PortProfileID, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::PortProfileID, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::CabledTestPair,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(aPortName);
    STRUCT_CHILD_GETTERS(zPortName);
    STRUCT_CHILD_GETTERS(profileID);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::FirmwareStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::FirmwareStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::FirmwareStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::version, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::fwFault, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dspFwVer, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::buildRev, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::FirmwareStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(version);
    STRUCT_CHILD_GETTERS(fwFault);
    STRUCT_CHILD_GETTERS(dspFwVer);
    STRUCT_CHILD_GETTERS(buildRev);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::HostLaneSignals>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::HostLaneSignals>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::HostLaneSignals>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HostLaneSignals, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::HostLaneSignals>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::HostLaneSignals>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::SignalFlags, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::SignalFlags,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::SignalFlags,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::txLos, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rxLos, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txLol, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rxLol, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::SignalFlags,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(txLos);
    STRUCT_CHILD_GETTERS(rxLos);
    STRUCT_CHILD_GETTERS(txLol);
    STRUCT_CHILD_GETTERS(rxLol);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::RsInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::RsInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::RsInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::faultStatus, ChildThriftPath<::facebook::fboss::phy::LinkFaultStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::phy::LinkFaultStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::RsInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(faultStatus);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QsfpServiceConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QsfpServiceConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QsfpServiceConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::defaultCommandLineArgs, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::transceiverConfigOverrides, ChildThriftPath<::std::vector<::facebook::fboss::cfg::TransceiverConfigOverride>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::sdk_version, ChildThriftPath<::facebook::fboss::cfg::QsfpSdkVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::qsfpTestConfig, ChildThriftPath<::facebook::fboss::cfg::QsfpTestConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::TransceiverConfigOverride>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::QsfpSdkVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::cfg::QsfpTestConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::QsfpServiceConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(defaultCommandLineArgs);
    STRUCT_CHILD_GETTERS(transceiverConfigOverrides);
    STRUCT_CHILD_GETTERS(sdk_version);
    STRUCT_CHILD_GETTERS(qsfpTestConfig);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::RxEqualizerSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::RxEqualizerSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::RxEqualizerSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::preCursor, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::postCursor, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::mainAmplitude, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::RxEqualizerSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(preCursor);
    STRUCT_CHILD_GETTERS(postCursor);
    STRUCT_CHILD_GETTERS(mainAmplitude);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PcsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PcsState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PcsState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::pcsRxStatusLive, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::pcsRxStatusLatched, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rsFecState, ChildThriftPath<::facebook::fboss::phy::RsFecState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::phy::RsFecState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::PcsState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(pcsRxStatusLive);
    STRUCT_CHILD_GETTERS(pcsRxStatusLatched);
    STRUCT_CHILD_GETTERS(rsFecState);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::ThresholdLevels, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::ThresholdLevels,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::ThresholdLevels,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::alarm, ChildThriftPath<::facebook::fboss::Thresholds, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::warn, ChildThriftPath<::facebook::fboss::Thresholds, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::Thresholds, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::Thresholds, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::ThresholdLevels,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(alarm);
    STRUCT_CHILD_GETTERS(warn);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::QsfpState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::QsfpState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::QsfpState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::qsfp_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::phyStates, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::tcvrStates, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::TcvrState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::TcvrState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::QsfpState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(phyStates);
    STRUCT_CHILD_GETTERS(tcvrStates);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::TransceiverConfigOverride, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::TransceiverConfigOverride,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::TransceiverConfigOverride,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::factor, ChildThriftPath<::facebook::fboss::cfg::TransceiverConfigOverrideFactor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::config, ChildThriftPath<::facebook::fboss::cfg::TransceiverOverrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::TransceiverConfigOverrideFactor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::TransceiverOverrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::TransceiverConfigOverride,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(factor);
    STRUCT_CHILD_GETTERS(config);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Sff8636Overrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Sff8636Overrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Sff8636Overrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::rxPreemphasis, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rxAmplitude, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txEqualization, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::Sff8636Overrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(rxPreemphasis);
    STRUCT_CHILD_GETTERS(rxAmplitude);
    STRUCT_CHILD_GETTERS(txEqualization);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QsfpSdkVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QsfpSdkVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QsfpSdkVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::version, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::QsfpSdkVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(version);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::ModuleStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::ModuleStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::ModuleStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::dataNotReady, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::interruptL, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::cmisModuleState, Child<::facebook::fboss::CmisModuleState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::fwStatus, ChildThriftPath<::facebook::fboss::FirmwareStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::cmisStateChanged, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::CmisModuleState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::FirmwareStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::ModuleStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(dataNotReady);
    STRUCT_CHILD_GETTERS(interruptL);
    STRUCT_CHILD_GETTERS(cmisModuleState);
    STRUCT_CHILD_GETTERS(fwStatus);
    STRUCT_CHILD_GETTERS(cmisStateChanged);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QsfpTestConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QsfpTestConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QsfpTestConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::cabledPortPairs, ChildThriftPath<::std::vector<::facebook::fboss::cfg::CabledTestPair>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::CabledTestPair>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::QsfpTestConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(cabledPortPairs);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::RsFecLaneState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::RsFecLaneState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::RsFecLaneState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::lane, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::fecAlignmentLockLive, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::fecAlignmentLockChanged, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::RsFecLaneState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(lane);
    STRUCT_CHILD_GETTERS(fecAlignmentLockLive);
    STRUCT_CHILD_GETTERS(fecAlignmentLockChanged);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HostLaneSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::HostLaneSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HostLaneSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::lane, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txInputEqualization, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rxOutputEmphasis, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rxOutputAmplitude, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rxOutput, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rxSquelch, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rxOutputPreCursor, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rxOutputPostCursor, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::HostLaneSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(lane);
    STRUCT_CHILD_GETTERS(txInputEqualization);
    STRUCT_CHILD_GETTERS(rxOutputEmphasis);
    STRUCT_CHILD_GETTERS(rxOutputAmplitude);
    STRUCT_CHILD_GETTERS(rxOutput);
    STRUCT_CHILD_GETTERS(rxSquelch);
    STRUCT_CHILD_GETTERS(rxOutputPreCursor);
    STRUCT_CHILD_GETTERS(rxOutputPostCursor);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MediaInterfaceUnion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::MediaInterfaceUnion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MediaInterfaceUnion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::smfCode, Child<::facebook::fboss::SMFMediaInterfaceCode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::extendedSpecificationComplianceCode, Child<::facebook::fboss::ExtendedSpecComplianceCode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::ethernet10GComplianceCode, Child<::facebook::fboss::Ethernet10GComplianceCode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::passiveCuCode, Child<::facebook::fboss::PassiveCuMediaInterfaceCode, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::SMFMediaInterfaceCode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::ExtendedSpecComplianceCode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::Ethernet10GComplianceCode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::PassiveCuMediaInterfaceCode, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::MediaInterfaceUnion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(smfCode);
    STRUCT_CHILD_GETTERS(extendedSpecificationComplianceCode);
    STRUCT_CHILD_GETTERS(ethernet10GComplianceCode);
    STRUCT_CHILD_GETTERS(passiveCuCode);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::TransceiverOverrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::TransceiverOverrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::TransceiverOverrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::sff, ChildThriftPath<::facebook::fboss::cfg::Sff8636Overrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::cmis, ChildThriftPath<::facebook::fboss::cfg::CmisOverrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::Sff8636Overrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::CmisOverrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::TransceiverOverrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(sff);
    STRUCT_CHILD_GETTERS(cmis);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::TcvrState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::facebook::fboss::TcvrState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::facebook::fboss::TcvrState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::TcvrState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::TcvrState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int32_t, ::facebook::fboss::TcvrState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::RsFecState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::RsFecState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::RsFecState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::lanes, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::RsFecLaneState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::RsFecLaneState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::RsFecState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(lanes);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MediaInterfaceId, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::MediaInterfaceId,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MediaInterfaceId,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::lane, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::media, ChildThriftPath<::facebook::fboss::MediaInterfaceUnion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::code, Child<::facebook::fboss::MediaInterfaceCode, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::MediaInterfaceUnion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::MediaInterfaceCode, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::MediaInterfaceId,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(lane);
    STRUCT_CHILD_GETTERS(media);
    STRUCT_CHILD_GETTERS(code);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::Thresholds, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::Thresholds,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::Thresholds,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::low, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::high, Child<double, ::apache::thrift::type_class::floating_point>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<double, ::apache::thrift::type_class::floating_point>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::Thresholds,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(low);
    STRUCT_CHILD_GETTERS(high);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PhyFwVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PhyFwVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PhyFwVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::version, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::crc, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::versionStr, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dateCode, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::minorVersion, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::PhyFwVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(version);
    STRUCT_CHILD_GETTERS(crc);
    STRUCT_CHILD_GETTERS(versionStr);
    STRUCT_CHILD_GETTERS(dateCode);
    STRUCT_CHILD_GETTERS(minorVersion);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PhySideState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PhySideState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PhySideState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::side, Child<::facebook::fboss::phy::Side, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::pcs, ChildThriftPath<::facebook::fboss::phy::PcsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::pmd, ChildThriftPath<::facebook::fboss::phy::PmdState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::rs, ChildThriftPath<::facebook::fboss::phy::RsInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::interfaceType, Child<::facebook::fboss::phy::InterfaceType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::medium, Child<::facebook::fboss::TransmitterTechnology, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::phy::Side, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::phy::PcsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::phy::PmdState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::phy::RsInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::phy::InterfaceType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::TransmitterTechnology, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::PhySideState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(side);
    STRUCT_CHILD_GETTERS(pcs);
    STRUCT_CHILD_GETTERS(pmd);
    STRUCT_CHILD_GETTERS(rs);
    STRUCT_CHILD_GETTERS(interfaceType);
    STRUCT_CHILD_GETTERS(medium);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::MediaInterfaceId>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::MediaInterfaceId>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::MediaInterfaceId>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::MediaInterfaceId, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::MediaInterfaceId>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::MediaInterfaceId>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::MediaLaneSignals>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::MediaLaneSignals>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::MediaLaneSignals>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::MediaLaneSignals, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::MediaLaneSignals>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::MediaLaneSignals>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   Parent>;
  using Child = ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::TcvrState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::TcvrState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::TcvrState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::present, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::transceiver, Child<::facebook::fboss::TransceiverType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::port, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::thresholds, ChildThriftPath<::facebook::fboss::AlarmThreshold, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::vendor, ChildThriftPath<::facebook::fboss::Vendor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::cable, ChildThriftPath<::facebook::fboss::Cable, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::settings, ChildThriftPath<::facebook::fboss::TransceiverSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::signalFlag, ChildThriftPath<::facebook::fboss::SignalFlags, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::extendedSpecificationComplianceCode, Child<::facebook::fboss::ExtendedSpecComplianceCode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::transceiverManagementInterface, Child<::facebook::fboss::TransceiverManagementInterface, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::identifier, Child<::facebook::fboss::TransceiverModuleIdentifier, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::status, ChildThriftPath<::facebook::fboss::ModuleStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::mediaLaneSignals, ChildThriftPath<::std::vector<::facebook::fboss::MediaLaneSignals>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::hostLaneSignals, ChildThriftPath<::std::vector<::facebook::fboss::HostLaneSignals>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::eepromCsumValid, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::moduleMediaInterface, Child<::facebook::fboss::MediaInterfaceCode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::stateMachineState, Child<::facebook::fboss::TransceiverStateMachineState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::portNameToHostLanes, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::portNameToMediaLanes, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::timeCollected, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::TransceiverType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::AlarmThreshold, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::Vendor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::Cable, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::facebook::fboss::TransceiverSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::facebook::fboss::SignalFlags, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::facebook::fboss::ExtendedSpecComplianceCode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::facebook::fboss::TransceiverManagementInterface, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::facebook::fboss::TransceiverModuleIdentifier, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, ChildThriftPath<::facebook::fboss::ModuleStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::vector<::facebook::fboss::MediaLaneSignals>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, ChildThriftPath<::std::vector<::facebook::fboss::HostLaneSignals>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::facebook::fboss::MediaInterfaceCode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::facebook::fboss::TransceiverStateMachineState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::TcvrState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(present);
    STRUCT_CHILD_GETTERS(transceiver);
    STRUCT_CHILD_GETTERS(port);
    STRUCT_CHILD_GETTERS(thresholds);
    STRUCT_CHILD_GETTERS(vendor);
    STRUCT_CHILD_GETTERS(cable);
    STRUCT_CHILD_GETTERS(settings);
    STRUCT_CHILD_GETTERS(signalFlag);
    STRUCT_CHILD_GETTERS(extendedSpecificationComplianceCode);
    STRUCT_CHILD_GETTERS(transceiverManagementInterface);
    STRUCT_CHILD_GETTERS(identifier);
    STRUCT_CHILD_GETTERS(status);
    STRUCT_CHILD_GETTERS(mediaLaneSignals);
    STRUCT_CHILD_GETTERS(hostLaneSignals);
    STRUCT_CHILD_GETTERS(eepromCsumValid);
    STRUCT_CHILD_GETTERS(moduleMediaInterface);
    STRUCT_CHILD_GETTERS(stateMachineState);
    STRUCT_CHILD_GETTERS(portNameToHostLanes);
    STRUCT_CHILD_GETTERS(portNameToMediaLanes);
    STRUCT_CHILD_GETTERS(timeCollected);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::QcmCfgFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::QcmCfgFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::QcmCfgFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::agingIntervalInMsecs, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::numFlowSamplesPerView, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::flowLimit, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::numFlowsClear, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::scanIntervalInUsecs, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::exportThreshold, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::monitorQcmCfgPortsOnly, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::flowWeights, ChildThriftPath<::std::map<::std::int32_t, ::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::collectorSrcIp, ChildThriftPath<::facebook::fboss::IpPrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::collectorDstIp, ChildThriftPath<::facebook::fboss::IpPrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::collectorSrcPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::collectorDstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::collectorDscp, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ppsToQcm, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::monitorQcmPortList, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::port2QosQueueIds, ChildThriftPath<::std::map<::std::int32_t, ::std::set<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::map<::std::int32_t, ::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::facebook::fboss::IpPrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::facebook::fboss::IpPrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, ChildThriftPath<::std::map<::std::int32_t, ::std::set<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::QcmCfgFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(agingIntervalInMsecs);
    STRUCT_CHILD_GETTERS(numFlowSamplesPerView);
    STRUCT_CHILD_GETTERS(flowLimit);
    STRUCT_CHILD_GETTERS(numFlowsClear);
    STRUCT_CHILD_GETTERS(scanIntervalInUsecs);
    STRUCT_CHILD_GETTERS(exportThreshold);
    STRUCT_CHILD_GETTERS(monitorQcmCfgPortsOnly);
    STRUCT_CHILD_GETTERS(flowWeights);
    STRUCT_CHILD_GETTERS(collectorSrcIp);
    STRUCT_CHILD_GETTERS(collectorDstIp);
    STRUCT_CHILD_GETTERS(collectorSrcPort);
    STRUCT_CHILD_GETTERS(collectorDstPort);
    STRUCT_CHILD_GETTERS(collectorDscp);
    STRUCT_CHILD_GETTERS(ppsToQcm);
    STRUCT_CHILD_GETTERS(monitorQcmPortList);
    STRUCT_CHILD_GETTERS(port2QosQueueIds);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::TrafficClassToQosAttributeEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::TrafficClassToQosAttributeMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::TrafficClassToQosAttributeMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::TrafficClassToQosAttributeMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::from, ChildThriftPath<::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::to, ChildThriftPath<::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::state::TrafficClassToQosAttributeEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::TrafficClassToQosAttributeMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(from);
    STRUCT_CHILD_GETTERS(to);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::BlockedNeighbor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::BlockedNeighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::BlockedNeighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::blockNeighborVlanID, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::blockNeighborIP, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::BlockedNeighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(blockNeighborVlanID);
    STRUCT_CHILD_GETTERS(blockNeighborIP);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::state::BlockedNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::state::BlockedNeighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::state::BlockedNeighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::BlockedNeighbor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::state::BlockedNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::state::BlockedNeighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::ControlPlaneFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::ControlPlaneFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::ControlPlaneFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::queues, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::rxReasonToQueue, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::defaultQosPolicy, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::ControlPlaneFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(queues);
    STRUCT_CHILD_GETTERS(rxReasonToQueue);
    STRUCT_CHILD_GETTERS(defaultQosPolicy);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::MediaLaneSettings>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::MediaLaneSettings>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::MediaLaneSettings>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::MediaLaneSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::MediaLaneSettings>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::MediaLaneSettings>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::RoutePrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::RoutePrefix,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::RoutePrefix,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::v6, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::prefix, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::mask, Child<::std::int8_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::RoutePrefix,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(v6);
    STRUCT_CHILD_GETTERS(prefix);
    STRUCT_CHILD_GETTERS(mask);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SdkVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SdkVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SdkVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::asicSdk, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::saiSdk, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::SdkVersion,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(asicSdk);
    STRUCT_CHILD_GETTERS(saiSdk);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::FibContainerFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::FibContainerFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::FibContainerFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::vrf, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::fibV4, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::RouteFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::fibV6, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::RouteFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::RouteFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::RouteFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::FibContainerFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(vrf);
    STRUCT_CHILD_GETTERS(fibV4);
    STRUCT_CHILD_GETTERS(fibV6);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::PortQueueFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::PortQueueFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::PortQueueFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::ctrl_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::id, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::weight, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::reserved, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::scalingFactor, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::scheduling, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::streamType, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::aqms, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::packetsPerSec_DEPRECATED, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::sharedBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::portQueueRate, ChildThriftPath<::facebook::fboss::cfg::PortQueueRate, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::bandwidthBurstMinKbits, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::bandwidthBurstMaxKbits, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::trafficClass, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::pfcPriorities, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::facebook::fboss::cfg::PortQueueRate, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::PortQueueFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(weight);
    STRUCT_CHILD_GETTERS(reserved);
    STRUCT_CHILD_GETTERS(scalingFactor);
    STRUCT_CHILD_GETTERS(scheduling);
    STRUCT_CHILD_GETTERS(streamType);
    STRUCT_CHILD_GETTERS(aqms);
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(packetsPerSec_DEPRECATED);
    STRUCT_CHILD_GETTERS(sharedBytes);
    STRUCT_CHILD_GETTERS(portQueueRate);
    STRUCT_CHILD_GETTERS(bandwidthBurstMinKbits);
    STRUCT_CHILD_GETTERS(bandwidthBurstMaxKbits);
    STRUCT_CHILD_GETTERS(trafficClass);
    STRUCT_CHILD_GETTERS(pfcPriorities);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::ClientID, ::facebook::fboss::state::RouteNextHopEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::ClientID, ::facebook::fboss::state::RouteNextHopEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::ClientID, ::facebook::fboss::state::RouteNextHopEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::RouteNextHopEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::ClientID, ::facebook::fboss::state::RouteNextHopEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::ClientID, ::facebook::fboss::state::RouteNextHopEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::ClientID);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   Parent>;
  using Child = ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int32_t, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int32_t, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AggregatePortMember>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AggregatePortMember>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AggregatePortMember>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::AggregatePortMember, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::AggregatePortMember>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::AggregatePortMember>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::SwitchSettingsFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::SwitchSettingsFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::SwitchSettingsFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::l2LearningMode, Child<::facebook::fboss::cfg::L2LearningMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::qcmEnable, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ptpTcEnable, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l2AgeTimerSeconds, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::maxRouteCounterIDs, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::blockNeighbors, ChildThriftPath<::std::vector<::facebook::fboss::state::BlockedNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::macAddrsToBlock, ChildThriftPath<::std::vector<::facebook::fboss::state::BlockedMacAddress>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchType_DEPRECATED, Child<::facebook::fboss::cfg::SwitchType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::switchId_DEPRECATED, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::exactMatchTableConfigs, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::systemPortRange_DEPRECATED, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::defaultVlan, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::arpTimeout, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ndpTimeout, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::arpAgerInterval, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::maxNeighborProbes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::staleEntryInterval, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dhcpV4RelaySrc, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dhcpV6RelaySrc, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dhcpV4ReplySrc, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dhcpV6ReplySrc, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::qcmCfg, ChildThriftPath<::facebook::fboss::state::QcmCfgFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::defaultDataPlaneQosPolicy, ChildThriftPath<::facebook::fboss::state::QosPolicyFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::udfConfig, ChildThriftPath<::facebook::fboss::cfg::UdfConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::flowletSwitchingConfig, ChildThriftPath<::facebook::fboss::cfg::FlowletSwitchingConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchIdToSwitchType_DEPRECATED, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchDrainState, Child<::facebook::fboss::cfg::SwitchDrainState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::switchIdToSwitchInfo, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::minLinksToRemainInVOQDomain, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::minLinksToJoinVOQDomain, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::actualSwitchDrainState, Child<::facebook::fboss::cfg::SwitchDrainState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::defaultVoqConfig, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchInfo, ChildThriftPath<::facebook::fboss::cfg::SwitchInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::vendorMacOuis, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::metaMacOuis, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::L2LearningMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::vector<::facebook::fboss::state::BlockedNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::vector<::facebook::fboss::state::BlockedMacAddress>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::facebook::fboss::cfg::SwitchType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, ChildThriftPath<::facebook::fboss::state::QcmCfgFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, ChildThriftPath<::facebook::fboss::state::QosPolicyFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, ChildThriftPath<::facebook::fboss::cfg::UdfConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, ChildThriftPath<::facebook::fboss::cfg::FlowletSwitchingConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, Child<::facebook::fboss::cfg::SwitchDrainState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 32>, Child<::facebook::fboss::cfg::SwitchDrainState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 33>, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 34>, ChildThriftPath<::facebook::fboss::cfg::SwitchInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 35>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 36>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::SwitchSettingsFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(l2LearningMode);
    STRUCT_CHILD_GETTERS(qcmEnable);
    STRUCT_CHILD_GETTERS(ptpTcEnable);
    STRUCT_CHILD_GETTERS(l2AgeTimerSeconds);
    STRUCT_CHILD_GETTERS(maxRouteCounterIDs);
    STRUCT_CHILD_GETTERS(blockNeighbors);
    STRUCT_CHILD_GETTERS(macAddrsToBlock);
    STRUCT_CHILD_GETTERS(switchType_DEPRECATED);
    STRUCT_CHILD_GETTERS(switchId_DEPRECATED);
    STRUCT_CHILD_GETTERS(exactMatchTableConfigs);
    STRUCT_CHILD_GETTERS(systemPortRange_DEPRECATED);
    STRUCT_CHILD_GETTERS(defaultVlan);
    STRUCT_CHILD_GETTERS(arpTimeout);
    STRUCT_CHILD_GETTERS(ndpTimeout);
    STRUCT_CHILD_GETTERS(arpAgerInterval);
    STRUCT_CHILD_GETTERS(maxNeighborProbes);
    STRUCT_CHILD_GETTERS(staleEntryInterval);
    STRUCT_CHILD_GETTERS(dhcpV4RelaySrc);
    STRUCT_CHILD_GETTERS(dhcpV6RelaySrc);
    STRUCT_CHILD_GETTERS(dhcpV4ReplySrc);
    STRUCT_CHILD_GETTERS(dhcpV6ReplySrc);
    STRUCT_CHILD_GETTERS(qcmCfg);
    STRUCT_CHILD_GETTERS(defaultDataPlaneQosPolicy);
    STRUCT_CHILD_GETTERS(udfConfig);
    STRUCT_CHILD_GETTERS(flowletSwitchingConfig);
    STRUCT_CHILD_GETTERS(switchIdToSwitchType_DEPRECATED);
    STRUCT_CHILD_GETTERS(switchDrainState);
    STRUCT_CHILD_GETTERS(switchIdToSwitchInfo);
    STRUCT_CHILD_GETTERS(minLinksToRemainInVOQDomain);
    STRUCT_CHILD_GETTERS(minLinksToJoinVOQDomain);
    STRUCT_CHILD_GETTERS(actualSwitchDrainState);
    STRUCT_CHILD_GETTERS(defaultVoqConfig);
    STRUCT_CHILD_GETTERS(switchInfo);
    STRUCT_CHILD_GETTERS(vendorMacOuis);
    STRUCT_CHILD_GETTERS(metaMacOuis);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::VlanFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::VlanFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::VlanFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::vlanId, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::vlanName, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::intfID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dhcpV4Relay, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dhcpV6Relay, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dhcpRelayOverridesV4, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dhcpRelayOverridesV6, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ports, ChildThriftPath<::std::map<::std::int16_t, bool>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::arpTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::arpResponseTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ndpTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ndpResponseTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::macTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::MacEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::map<::std::int16_t, bool>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::MacEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::VlanFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(vlanId);
    STRUCT_CHILD_GETTERS(vlanName);
    STRUCT_CHILD_GETTERS(intfID);
    STRUCT_CHILD_GETTERS(dhcpV4Relay);
    STRUCT_CHILD_GETTERS(dhcpV6Relay);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV4);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV6);
    STRUCT_CHILD_GETTERS(ports);
    STRUCT_CHILD_GETTERS(arpTable);
    STRUCT_CHILD_GETTERS(arpResponseTable);
    STRUCT_CHILD_GETTERS(ndpTable);
    STRUCT_CHILD_GETTERS(ndpResponseTable);
    STRUCT_CHILD_GETTERS(macTable);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AclTable, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AclTable,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AclTable,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::priority, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::aclEntries, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::actionTypes, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableActionType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::qualifiers, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableQualifier>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableActionType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableQualifier>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::AclTable,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(priority);
    STRUCT_CHILD_GETTERS(aclEntries);
    STRUCT_CHILD_GETTERS(actionTypes);
    STRUCT_CHILD_GETTERS(qualifiers);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::ExpQosMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::ExpQosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::ExpQosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::internalTrafficClass, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::fromExpToTrafficClass, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::fromTrafficClassToExp, Child<::std::int8_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::ExpQosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(internalTrafficClass);
    STRUCT_CHILD_GETTERS(fromExpToTrafficClass);
    STRUCT_CHILD_GETTERS(fromTrafficClassToExp);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::MirrorFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::MirrorFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::MirrorFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExpQosMap>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::ExpQosMap>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::ExpQosMap>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::ExpQosMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExpQosMap>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::ExpQosMap>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::ActiveQueueManagement, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::ActiveQueueManagement,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::ActiveQueueManagement,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::detection, ChildThriftPath<::facebook::fboss::cfg::QueueCongestionDetection, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::behavior, Child<::facebook::fboss::cfg::QueueCongestionBehavior, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::QueueCongestionDetection, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::QueueCongestionBehavior, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::ActiveQueueManagement,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(detection);
    STRUCT_CHILD_GETTERS(behavior);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclLookupClass>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AclLookupClass>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AclLookupClass>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::AclLookupClass, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclLookupClass>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::AclLookupClass>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::ProfileSideConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::ProfileSideConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::ProfileSideConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::numLanes, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::modulation, Child<::facebook::fboss::phy::IpModulation, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::fec, Child<::facebook::fboss::phy::FecMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::medium, Child<::facebook::fboss::TransmitterTechnology, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::interfaceMode, Child<::facebook::fboss::phy::InterfaceMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::interfaceType, Child<::facebook::fboss::phy::InterfaceType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::interPacketGapBits, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::phy::IpModulation, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::phy::FecMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::TransmitterTechnology, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::phy::InterfaceMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::phy::InterfaceType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::ProfileSideConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(numLanes);
    STRUCT_CHILD_GETTERS(modulation);
    STRUCT_CHILD_GETTERS(fec);
    STRUCT_CHILD_GETTERS(medium);
    STRUCT_CHILD_GETTERS(interfaceMode);
    STRUCT_CHILD_GETTERS(interfaceType);
    STRUCT_CHILD_GETTERS(interPacketGapBits);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::string>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::string>,
   Parent>;
  using Child = Path<::std::string, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::string, Self>;

  explicit ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::string>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Range, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Range,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Range,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::minimum, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::maximum, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::Range,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(minimum);
    STRUCT_CHILD_GETTERS(maximum);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::TeFlowEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::TeFlowEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::TeFlowEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::flow, ChildThriftPath<::facebook::fboss::TeFlow, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::nexthops, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::resolvedNexthops, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::enabled, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::counterID, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::statEnabled, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::TeFlow, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::TeFlowEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(flow);
    STRUCT_CHILD_GETTERS(nexthops);
    STRUCT_CHILD_GETTERS(resolvedNexthops);
    STRUCT_CHILD_GETTERS(enabled);
    STRUCT_CHILD_GETTERS(counterID);
    STRUCT_CHILD_GETTERS(statEnabled);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::QosPolicyFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::TrafficCounter>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::TrafficCounter>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::TrafficCounter>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::TrafficCounter, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::TrafficCounter>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::TrafficCounter>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::IpInIpTunnel>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::IpInIpTunnel>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::IpInIpTunnel>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::IpInIpTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::IpInIpTunnel>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::IpInIpTunnel>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AggregatePort, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AggregatePort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AggregatePort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::key, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::description, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::memberPorts, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AggregatePortMember>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::minimumCapacity, ChildThriftPath<::facebook::fboss::cfg::MinimumCapacity, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::counterTags, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AggregatePortMember>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::cfg::MinimumCapacity, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::AggregatePort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(key);
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(description);
    STRUCT_CHILD_GETTERS(memberPorts);
    STRUCT_CHILD_GETTERS(minimumCapacity);
    STRUCT_CHILD_GETTERS(counterTags);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::TrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::TrafficPolicyConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::TrafficPolicyConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::matchToAction, ChildThriftPath<::std::vector<::facebook::fboss::cfg::MatchToAction>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::defaultQosPolicy, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::portIdToQosPolicy, ChildThriftPath<::std::map<::std::int32_t, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::MatchToAction>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::int32_t, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::TrafficPolicyConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(matchToAction);
    STRUCT_CHILD_GETTERS(defaultQosPolicy);
    STRUCT_CHILD_GETTERS(portIdToQosPolicy);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::phy::PhyState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::phy::PhyState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::phy::PhyState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::phy::PhyState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AgentConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AgentConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AgentConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::agent_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::defaultCommandLineArgs, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::sw, ChildThriftPath<::facebook::fboss::cfg::SwitchConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::platform, ChildThriftPath<::facebook::fboss::cfg::PlatformConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::SwitchConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::PlatformConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::AgentConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(defaultCommandLineArgs);
    STRUCT_CHILD_GETTERS(sw);
    STRUCT_CHILD_GETTERS(platform);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::FibContainerFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::SendToQueue, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::SendToQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::SendToQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::action, ChildThriftPath<::facebook::fboss::cfg::QueueMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::sendToCPU, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::QueueMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::SendToQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(action);
    STRUCT_CHILD_GETTERS(sendToCPU);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::LinearQueueCongestionDetection, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::LinearQueueCongestionDetection,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::LinearQueueCongestionDetection,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::minimumLength, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::maximumLength, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::probability, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::LinearQueueCongestionDetection,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(minimumLength);
    STRUCT_CHILD_GETTERS(maximumLength);
    STRUCT_CHILD_GETTERS(probability);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MirrorTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MirrorTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MirrorTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::greTunnel, ChildThriftPath<::facebook::fboss::cfg::GreTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::sflowTunnel, ChildThriftPath<::facebook::fboss::cfg::SflowTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::srcIp, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::GreTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::SflowTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::MirrorTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(greTunnel);
    STRUCT_CHILD_GETTERS(sflowTunnel);
    STRUCT_CHILD_GETTERS(srcIp);
};

template<typename Parent>
class ChildThriftPath<::std::set<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::set<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>,
   Parent> {
 public:
  using Self = Path<
   ::std::set<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>,
   Parent>;
  using Child = Path<::std::int32_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, Self>;

  explicit ChildThriftPath<::std::set<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::set<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::LaneState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::LaneState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::LaneState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::lane, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::signalDetectLive, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::signalDetectChanged, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::cdrLockLive, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::cdrLockChanged, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txSettings, ChildThriftPath<::facebook::fboss::phy::TxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::rxFrequencyPPM, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::phy::TxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::LaneState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(lane);
    STRUCT_CHILD_GETTERS(signalDetectLive);
    STRUCT_CHILD_GETTERS(signalDetectChanged);
    STRUCT_CHILD_GETTERS(cdrLockLive);
    STRUCT_CHILD_GETTERS(cdrLockChanged);
    STRUCT_CHILD_GETTERS(txSettings);
    STRUCT_CHILD_GETTERS(rxFrequencyPPM);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::asic::AsicConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::asic::AsicConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::asic::AsicConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::asic::asic_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::config, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::asic::AsicConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(config);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableQualifier>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AclTableQualifier>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AclTableQualifier>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::AclTableQualifier, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableQualifier>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::AclTableQualifier>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::state::RxSak>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::state::RxSak>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::state::RxSak>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::RxSak, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::state::RxSak>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::state::RxSak>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::Interface>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::Interface>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::Interface>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::Interface, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::Interface>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::Interface>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SwitchSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SwitchSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SwitchSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::l2LearningMode, Child<::facebook::fboss::cfg::L2LearningMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::qcmEnable, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ptpTcEnable, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l2AgeTimerSeconds, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::maxRouteCounterIDs, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::blockNeighbors, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Neighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::macAddrsToBlock, ChildThriftPath<::std::vector<::facebook::fboss::cfg::MacAndVlan>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchType, Child<::facebook::fboss::cfg::SwitchType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::switchId, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::exactMatchTableConfigs, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchIdToSwitchType_DEPRECATED, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchDrainState, Child<::facebook::fboss::cfg::SwitchDrainState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::switchIdToSwitchInfo, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::minLinksToRemainInVOQDomain, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::minLinksToJoinVOQDomain, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::vendorMacOuis, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::metaMacOuis, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::L2LearningMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Neighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::MacAndVlan>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::facebook::fboss::cfg::SwitchType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::facebook::fboss::cfg::SwitchDrainState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::SwitchSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(l2LearningMode);
    STRUCT_CHILD_GETTERS(qcmEnable);
    STRUCT_CHILD_GETTERS(ptpTcEnable);
    STRUCT_CHILD_GETTERS(l2AgeTimerSeconds);
    STRUCT_CHILD_GETTERS(maxRouteCounterIDs);
    STRUCT_CHILD_GETTERS(blockNeighbors);
    STRUCT_CHILD_GETTERS(macAddrsToBlock);
    STRUCT_CHILD_GETTERS(switchType);
    STRUCT_CHILD_GETTERS(switchId);
    STRUCT_CHILD_GETTERS(exactMatchTableConfigs);
    STRUCT_CHILD_GETTERS(switchIdToSwitchType_DEPRECATED);
    STRUCT_CHILD_GETTERS(switchDrainState);
    STRUCT_CHILD_GETTERS(switchIdToSwitchInfo);
    STRUCT_CHILD_GETTERS(minLinksToRemainInVOQDomain);
    STRUCT_CHILD_GETTERS(minLinksToJoinVOQDomain);
    STRUCT_CHILD_GETTERS(vendorMacOuis);
    STRUCT_CHILD_GETTERS(metaMacOuis);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::PortNeighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::PortNeighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::PortNeighbor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::PortNeighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::TransceiverSpecFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::TransceiverSpecFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::TransceiverSpecFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::id, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::cableLength, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::mediaInterface, Child<::facebook::fboss::MediaInterfaceCode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::managementInterface, Child<::facebook::fboss::TransceiverManagementInterface, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::MediaInterfaceCode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::TransceiverManagementInterface, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::TransceiverSpecFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(cableLength);
    STRUCT_CHILD_GETTERS(mediaInterface);
    STRUCT_CHILD_GETTERS(managementInterface);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SflowTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SflowTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SflowTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::ip, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::udpSrcPort, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::udpDstPort, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ttl, ChildThriftPath<::facebook::fboss::cfg::Ttl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::cfg::Ttl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::SflowTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(ip);
    STRUCT_CHILD_GETTERS(udpSrcPort);
    STRUCT_CHILD_GETTERS(udpDstPort);
    STRUCT_CHILD_GETTERS(ttl);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::SwitchSettingsFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::SwitchSettingsFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::SwitchSettingsFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::SwitchSettingsFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::SwitchSettingsFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::SwitchSettingsFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::PortQueue>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::PortQueue>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::PortQueue, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::PortQueue>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::StaticRouteNoNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::StaticRouteNoNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::StaticRouteNoNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::routerID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::prefix, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::StaticRouteNoNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(routerID);
    STRUCT_CHILD_GETTERS(prefix);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortPgConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortPgConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortPgConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::id, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::scalingFactor, Child<::facebook::fboss::cfg::MMUScalingFactor, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::minLimitBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::headroomLimitBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::resumeOffsetBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::bufferPoolName, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::MMUScalingFactor, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::PortPgConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(scalingFactor);
    STRUCT_CHILD_GETTERS(minLimitBytes);
    STRUCT_CHILD_GETTERS(headroomLimitBytes);
    STRUCT_CHILD_GETTERS(resumeOffsetBytes);
    STRUCT_CHILD_GETTERS(bufferPoolName);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::ExactMatchTableConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::ExactMatchTableConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::bcm::BcmConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::bcm::BcmConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::bcm::BcmConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::bcm::bcm_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::config, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::yamlConfig, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::bcm::BcmConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(config);
    STRUCT_CHILD_GETTERS(yamlConfig);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>,
   Parent>;
  using Child = Path<::std::string, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::string, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::PlatformAttributes);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::SwitchState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::SwitchState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::SwitchState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::portMap_DEPRECATED, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::vlanMap_DEPRECATED, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::aclMap_DEPRECATED, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::transceiverMap_DEPRECATED, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::bufferPoolCfgMap_DEPRECATED, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::mirrorMap_DEPRECATED, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::MirrorFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::controlPlane_DEPRECATED, ChildThriftPath<::facebook::fboss::state::ControlPlaneFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchSettings_DEPRECATED, ChildThriftPath<::facebook::fboss::state::SwitchSettingsFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::defaultVlan_DEPRECATED, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::arpTimeout_DEPRECATED, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ndpTimeout_DEPRECATED, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::arpAgerInterval_DEPRECATED, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::maxNeighborProbes_DEPRECATED, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::staleEntryInterval_DEPRECATED, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dhcpV4RelaySrc_DEPRECATED, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dhcpV6RelaySrc_DEPRECATED, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dhcpV4ReplySrc_DEPRECATED, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dhcpV6ReplySrc_DEPRECATED, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::systemPortMap_DEPRECATED, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::fibs_DEPRECATED, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::labelFib_DEPRECATED, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::qosPolicyMap_DEPRECATED, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::sflowCollectorMap_DEPRECATED, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ipTunnelMap_DEPRECATED, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::teFlowTable_DEPRECATED, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::aggregatePortMap_DEPRECATED, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::loadBalancerMap_DEPRECATED, ChildThriftPath<::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::interfaceMap_DEPRECATED, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dsfNodes_DEPRECATED, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::udfConfig_DEPRECATED, ChildThriftPath<::facebook::fboss::cfg::UdfConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::remoteSystemPortMap_DEPRECATED, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::remoteInterfaceMap_DEPRECATED, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::portMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::vlanMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::aclMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::transceiverMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::bufferPoolCfgMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::mirrorMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::controlPlaneMap, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::ControlPlaneFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchSettingsMap, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::SwitchSettingsFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::systemPortMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::fibsMap, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::labelFibMap, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::qosPolicyMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::sflowCollectorMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ipTunnelMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::teFlowTables, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::aggregatePortMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::loadBalancerMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::aclTableGroupMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::interfaceMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dsfNodesMap, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::portFlowletCfgMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::remoteSystemPortMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::remoteInterfaceMaps, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::MirrorFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::state::ControlPlaneFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::facebook::fboss::state::SwitchSettingsFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, ChildThriftPath<::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 33>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 34>, ChildThriftPath<::facebook::fboss::cfg::UdfConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 500>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 501>, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 100>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 101>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 102>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 103>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 104>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 105>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 106>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::ControlPlaneFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 107>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::SwitchSettingsFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 108>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 109>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 110>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 111>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 112>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 113>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 114>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 115>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 116>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 117>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 118>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 119>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 120>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 600>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 601>, ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::SwitchState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(portMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(vlanMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(aclMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(transceiverMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(bufferPoolCfgMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(mirrorMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(controlPlane_DEPRECATED);
    STRUCT_CHILD_GETTERS(switchSettings_DEPRECATED);
    STRUCT_CHILD_GETTERS(defaultVlan_DEPRECATED);
    STRUCT_CHILD_GETTERS(arpTimeout_DEPRECATED);
    STRUCT_CHILD_GETTERS(ndpTimeout_DEPRECATED);
    STRUCT_CHILD_GETTERS(arpAgerInterval_DEPRECATED);
    STRUCT_CHILD_GETTERS(maxNeighborProbes_DEPRECATED);
    STRUCT_CHILD_GETTERS(staleEntryInterval_DEPRECATED);
    STRUCT_CHILD_GETTERS(dhcpV4RelaySrc_DEPRECATED);
    STRUCT_CHILD_GETTERS(dhcpV6RelaySrc_DEPRECATED);
    STRUCT_CHILD_GETTERS(dhcpV4ReplySrc_DEPRECATED);
    STRUCT_CHILD_GETTERS(dhcpV6ReplySrc_DEPRECATED);
    STRUCT_CHILD_GETTERS(systemPortMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(fibs_DEPRECATED);
    STRUCT_CHILD_GETTERS(labelFib_DEPRECATED);
    STRUCT_CHILD_GETTERS(qosPolicyMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(sflowCollectorMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(ipTunnelMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(teFlowTable_DEPRECATED);
    STRUCT_CHILD_GETTERS(aggregatePortMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(loadBalancerMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(interfaceMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(dsfNodes_DEPRECATED);
    STRUCT_CHILD_GETTERS(udfConfig_DEPRECATED);
    STRUCT_CHILD_GETTERS(remoteSystemPortMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(remoteInterfaceMap_DEPRECATED);
    STRUCT_CHILD_GETTERS(portMaps);
    STRUCT_CHILD_GETTERS(vlanMaps);
    STRUCT_CHILD_GETTERS(aclMaps);
    STRUCT_CHILD_GETTERS(transceiverMaps);
    STRUCT_CHILD_GETTERS(bufferPoolCfgMaps);
    STRUCT_CHILD_GETTERS(mirrorMaps);
    STRUCT_CHILD_GETTERS(controlPlaneMap);
    STRUCT_CHILD_GETTERS(switchSettingsMap);
    STRUCT_CHILD_GETTERS(systemPortMaps);
    STRUCT_CHILD_GETTERS(fibsMap);
    STRUCT_CHILD_GETTERS(labelFibMap);
    STRUCT_CHILD_GETTERS(qosPolicyMaps);
    STRUCT_CHILD_GETTERS(sflowCollectorMaps);
    STRUCT_CHILD_GETTERS(ipTunnelMaps);
    STRUCT_CHILD_GETTERS(teFlowTables);
    STRUCT_CHILD_GETTERS(aggregatePortMaps);
    STRUCT_CHILD_GETTERS(loadBalancerMaps);
    STRUCT_CHILD_GETTERS(aclTableGroupMaps);
    STRUCT_CHILD_GETTERS(interfaceMaps);
    STRUCT_CHILD_GETTERS(dsfNodesMap);
    STRUCT_CHILD_GETTERS(portFlowletCfgMaps);
    STRUCT_CHILD_GETTERS(remoteSystemPortMaps);
    STRUCT_CHILD_GETTERS(remoteInterfaceMaps);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::QosPolicy>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::QosPolicy>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::QosPolicy>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::QosPolicy, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::QosPolicy>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::QosPolicy>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::UdfPacketMatcher, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::UdfPacketMatcher,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::UdfPacketMatcher,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::l2PktType, Child<::facebook::fboss::cfg::UdfMatchL2Type, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::l3pktType, Child<::facebook::fboss::cfg::UdfMatchL3Type, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::l4PktType, Child<::facebook::fboss::cfg::UdfMatchL4Type, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::UdfL4DstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::UdfMatchL2Type, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::UdfMatchL3Type, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::cfg::UdfMatchL4Type, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::UdfPacketMatcher,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(l2PktType);
    STRUCT_CHILD_GETTERS(l3pktType);
    STRUCT_CHILD_GETTERS(l4PktType);
    STRUCT_CHILD_GETTERS(UdfL4DstPort);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::RouteNextHopEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::RouteNextHopEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::RouteNextHopEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::adminDistance, Child<::facebook::fboss::AdminDistance, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::action, Child<::facebook::fboss::RouteForwardAction, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::counterID, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::classID, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::nexthops, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::AdminDistance, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::RouteForwardAction, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::RouteNextHopEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(adminDistance);
    STRUCT_CHILD_GETTERS(action);
    STRUCT_CHILD_GETTERS(counterID);
    STRUCT_CHILD_GETTERS(classID);
    STRUCT_CHILD_GETTERS(nexthops);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::LoadBalancerFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::LoadBalancerID);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableActionType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AclTableActionType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AclTableActionType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::AclTableActionType, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableActionType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::AclTableActionType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MplsAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::MplsAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MplsAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::mpls_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::action, Child<::facebook::fboss::MplsActionCode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::swapLabel, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::pushLabels, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::MplsActionCode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::MplsAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(action);
    STRUCT_CHILD_GETTERS(swapLabel);
    STRUCT_CHILD_GETTERS(pushLabels);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::LoadBalancer, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::LoadBalancer,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::LoadBalancer,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::id, Child<::facebook::fboss::cfg::LoadBalancerID, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::fieldSelection, ChildThriftPath<::facebook::fboss::cfg::Fields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::algorithm, Child<::facebook::fboss::cfg::HashingAlgorithm, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::seed, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::LoadBalancerID, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::Fields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::HashingAlgorithm, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::LoadBalancer,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(fieldSelection);
    STRUCT_CHILD_GETTERS(algorithm);
    STRUCT_CHILD_GETTERS(seed);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::MatchToAction>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::MatchToAction>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::MatchToAction>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::MatchToAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::MatchToAction>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::MatchToAction>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortNeighbor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortNeighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortNeighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::remoteSystem, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::remotePort, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::PortNeighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(remoteSystem);
    STRUCT_CHILD_GETTERS(remotePort);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::StaticRouteNoNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Fields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Fields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Fields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::ipv4Fields, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv4Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ipv6Fields, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv6Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::transportFields, ChildThriftPath<::std::set<::facebook::fboss::cfg::TransportField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::mplsFields, ChildThriftPath<::std::set<::facebook::fboss::cfg::MPLSField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::udfGroups, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv4Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv6Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::set<::facebook::fboss::cfg::TransportField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::set<::facebook::fboss::cfg::MPLSField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::Fields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(ipv4Fields);
    STRUCT_CHILD_GETTERS(ipv6Fields);
    STRUCT_CHILD_GETTERS(transportFields);
    STRUCT_CHILD_GETTERS(mplsFields);
    STRUCT_CHILD_GETTERS(udfGroups);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::NextHopThrift, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::NextHopThrift,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::NextHopThrift,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::common_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::address, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::weight, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::mplsAction, ChildThriftPath<::facebook::fboss::MplsAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::MplsAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::NextHopThrift,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(address);
    STRUCT_CHILD_GETTERS(weight);
    STRUCT_CHILD_GETTERS(mplsAction);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QcmConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QcmConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QcmConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::numFlowSamplesPerView, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::flowLimit, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::numFlowsClear, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::scanIntervalInUsecs, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::exportThreshold, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::flowWeights, ChildThriftPath<::std::map<::facebook::fboss::cfg::BurstMonitorWeight, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::agingIntervalInMsecs, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::collectorDstIp, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::collectorSrcPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::collectorDstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::collectorDscp, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ppsToQcm, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::collectorSrcIp, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::monitorQcmPortList, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::port2QosQueueIds, ChildThriftPath<::std::map<::std::int32_t, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::monitorQcmCfgPortsOnly, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::facebook::fboss::cfg::BurstMonitorWeight, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, ChildThriftPath<::std::map<::std::int32_t, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::QcmConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(numFlowSamplesPerView);
    STRUCT_CHILD_GETTERS(flowLimit);
    STRUCT_CHILD_GETTERS(numFlowsClear);
    STRUCT_CHILD_GETTERS(scanIntervalInUsecs);
    STRUCT_CHILD_GETTERS(exportThreshold);
    STRUCT_CHILD_GETTERS(flowWeights);
    STRUCT_CHILD_GETTERS(agingIntervalInMsecs);
    STRUCT_CHILD_GETTERS(collectorDstIp);
    STRUCT_CHILD_GETTERS(collectorSrcPort);
    STRUCT_CHILD_GETTERS(collectorDstPort);
    STRUCT_CHILD_GETTERS(collectorDscp);
    STRUCT_CHILD_GETTERS(ppsToQcm);
    STRUCT_CHILD_GETTERS(collectorSrcIp);
    STRUCT_CHILD_GETTERS(monitorQcmPortList);
    STRUCT_CHILD_GETTERS(port2QosQueueIds);
    STRUCT_CHILD_GETTERS(monitorQcmCfgPortsOnly);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::RedirectNextHop, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::RedirectNextHop,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::RedirectNextHop,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::ip, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::intfID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::RedirectNextHop,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(ip);
    STRUCT_CHILD_GETTERS(intfID);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::UdfGroup>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::cfg::UdfGroup>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::cfg::UdfGroup>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::UdfGroup, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::UdfGroup>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::cfg::UdfGroup>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::RedirectToNextHopAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::RedirectToNextHopAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::nexthops, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::redirectNextHops, ChildThriftPath<::std::vector<::facebook::fboss::cfg::RedirectNextHop>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::RedirectNextHop>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::RedirectToNextHopAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(nexthops);
    STRUCT_CHILD_GETTERS(redirectNextHops);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::DsfNode, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int64_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::DsfNode, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::DsfNode,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::DsfNode,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::switchId, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::type, Child<::facebook::fboss::cfg::DsfNodeType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::loopbackIps, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::systemPortRange, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::nodeMac, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::asicType, Child<::facebook::fboss::cfg::AsicType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::platformType, Child<::facebook::fboss::PlatformType, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::DsfNodeType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::facebook::fboss::cfg::AsicType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::facebook::fboss::PlatformType, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::DsfNode,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(switchId);
    STRUCT_CHILD_GETTERS(type);
    STRUCT_CHILD_GETTERS(loopbackIps);
    STRUCT_CHILD_GETTERS(systemPortRange);
    STRUCT_CHILD_GETTERS(nodeMac);
    STRUCT_CHILD_GETTERS(asicType);
    STRUCT_CHILD_GETTERS(platformType);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::TxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::TxSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::TxSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::pre, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::pre2, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::main, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::post, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::post2, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::post3, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lutMode, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::driveCurrent, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::diffEncoderEn, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::digGain, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ffeCoeff0, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ffeCoeff1, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ffeCoeff2, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ffeCoeff3, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ffeCoeff4, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::parityEncoderEn, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::thpEn, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::setPrecode, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::pre3, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::driverSwing, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::TxSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(pre);
    STRUCT_CHILD_GETTERS(pre2);
    STRUCT_CHILD_GETTERS(main);
    STRUCT_CHILD_GETTERS(post);
    STRUCT_CHILD_GETTERS(post2);
    STRUCT_CHILD_GETTERS(post3);
    STRUCT_CHILD_GETTERS(lutMode);
    STRUCT_CHILD_GETTERS(driveCurrent);
    STRUCT_CHILD_GETTERS(diffEncoderEn);
    STRUCT_CHILD_GETTERS(digGain);
    STRUCT_CHILD_GETTERS(ffeCoeff0);
    STRUCT_CHILD_GETTERS(ffeCoeff1);
    STRUCT_CHILD_GETTERS(ffeCoeff2);
    STRUCT_CHILD_GETTERS(ffeCoeff3);
    STRUCT_CHILD_GETTERS(ffeCoeff4);
    STRUCT_CHILD_GETTERS(parityEncoderEn);
    STRUCT_CHILD_GETTERS(thpEn);
    STRUCT_CHILD_GETTERS(setPrecode);
    STRUCT_CHILD_GETTERS(pre3);
    STRUCT_CHILD_GETTERS(driverSwing);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::UdfConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::UdfConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::UdfConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::udfGroups, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::UdfGroup>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::udfPacketMatcher, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::UdfPacketMatcher>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::UdfGroup>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::UdfPacketMatcher>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::UdfConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(udfGroups);
    STRUCT_CHILD_GETTERS(udfPacketMatcher);
};

template<typename Parent>
class ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv6Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::set<::facebook::fboss::cfg::IPv6Field>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   Parent> {
 public:
  using Self = Path<
   ::std::set<::facebook::fboss::cfg::IPv6Field>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::IPv6Field, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, Self>;

  explicit ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv6Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::set<::facebook::fboss::cfg::IPv6Field>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::IPv6Field);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::QosRule>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::QosRule>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::QosRule>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::QosRule, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::QosRule>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::QosRule>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortDescriptor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortDescriptor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortDescriptor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::portId, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::portType, Child<::facebook::fboss::cfg::PortDescriptorType, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::PortDescriptorType, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::PortDescriptor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(portId);
    STRUCT_CHILD_GETTERS(portType);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PolaritySwap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PolaritySwap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PolaritySwap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::rx, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::tx, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::PolaritySwap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(rx);
    STRUCT_CHILD_GETTERS(tx);
};

template<typename Parent>
class ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv4Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::set<::facebook::fboss::cfg::IPv4Field>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   Parent> {
 public:
  using Self = Path<
   ::std::set<::facebook::fboss::cfg::IPv4Field>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::IPv4Field, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, Self>;

  explicit ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv4Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::set<::facebook::fboss::cfg::IPv4Field>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::IPv4Field);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::Label, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::Label,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::Label,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::value, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::Label,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(value);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PktLenRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PktLenRange,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PktLenRange,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::min, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::max, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::invert, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::PktLenRange,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(min);
    STRUCT_CHILD_GETTERS(max);
    STRUCT_CHILD_GETTERS(invert);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::Vlan>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::Vlan>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::Vlan>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::Vlan, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::Vlan>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::Vlan>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::PacketRxReason, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::PacketRxReason, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::integral>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::PacketRxReason, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::integral>,
   Parent>;
  using Child = Path<::std::int16_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::cfg::PacketRxReason, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::cfg::PacketRxReason, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::integral>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::PacketRxReason);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::LaneMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::LaneMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::LaneMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::rx, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::tx, Child<::std::int8_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::LaneMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(rx);
    STRUCT_CHILD_GETTERS(tx);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::IpPrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::IpPrefix,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::IpPrefix,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::ctrl_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::ip, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::prefixLength, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::IpPrefix,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(ip);
    STRUCT_CHILD_GETTERS(prefixLength);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::LoadBalancer>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::LoadBalancer>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::LoadBalancer>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::LoadBalancer, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::LoadBalancer>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::LoadBalancer>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::CmisOverrides, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::CmisOverrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::CmisOverrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::qsfp_service_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::rxEqualizerSettings, ChildThriftPath<::facebook::fboss::RxEqualizerSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::RxEqualizerSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::CmisOverrides,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(rxEqualizerSettings);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::GreTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::GreTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::GreTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::ip, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::ttl, ChildThriftPath<::facebook::fboss::cfg::Ttl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::Ttl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::GreTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(ip);
    STRUCT_CHILD_GETTERS(ttl);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::LinkFaultStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::LinkFaultStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::LinkFaultStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::localFault, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::remoteFault, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::LinkFaultStatus,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(localFault);
    STRUCT_CHILD_GETTERS(remoteFault);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent>;
  using Child = Path<::std::int16_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, Self>;

  explicit ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int16_t, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::StaticMplsRouteWithNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::BurstMonitorWeight, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::BurstMonitorWeight, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::integral>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::BurstMonitorWeight, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::integral>,
   Parent>;
  using Child = Path<::std::int16_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::cfg::BurstMonitorWeight, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::cfg::BurstMonitorWeight, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::integral>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::BurstMonitorWeight);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::LaneState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::LaneState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::LaneState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::phy::LaneState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::LaneState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::LaneState>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::DataPlanePhyChip, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::DataPlanePhyChip,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::DataPlanePhyChip,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::type, Child<::facebook::fboss::phy::DataPlanePhyChipType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::physicalID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::phy::DataPlanePhyChipType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::DataPlanePhyChip,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(type);
    STRUCT_CHILD_GETTERS(physicalID);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::IpTunnelFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::IpTunnelFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::IpTunnelFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::ipTunnelId, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::underlayIntfId, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::mode, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dstIp, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::type, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::tunnelTermType, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ttlMode, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dscpMode, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ecnMode, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::srcIp, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dstIpMask, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::srcIpMask, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::IpTunnelFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(ipTunnelId);
    STRUCT_CHILD_GETTERS(underlayIntfId);
    STRUCT_CHILD_GETTERS(mode);
    STRUCT_CHILD_GETTERS(dstIp);
    STRUCT_CHILD_GETTERS(type);
    STRUCT_CHILD_GETTERS(tunnelTermType);
    STRUCT_CHILD_GETTERS(ttlMode);
    STRUCT_CHILD_GETTERS(dscpMode);
    STRUCT_CHILD_GETTERS(ecnMode);
    STRUCT_CHILD_GETTERS(srcIp);
    STRUCT_CHILD_GETTERS(dstIpMask);
    STRUCT_CHILD_GETTERS(srcIpMask);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::VlanPort, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::VlanPort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::VlanPort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::vlanID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::logicalPort, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::spanningTreeState, Child<::facebook::fboss::cfg::SpanningTreeState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::emitTags, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::SpanningTreeState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::VlanPort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(vlanID);
    STRUCT_CHILD_GETTERS(logicalPort);
    STRUCT_CHILD_GETTERS(spanningTreeState);
    STRUCT_CHILD_GETTERS(emitTags);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::fsdb::AgentData, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::fsdb::AgentData,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::fsdb::AgentData,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::fsdb::fsdb_model_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::config, ChildThriftPath<::facebook::fboss::cfg::AgentConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchState, ChildThriftPath<::facebook::fboss::state::SwitchState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::AgentConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::state::SwitchState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::fsdb::AgentData,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(config);
    STRUCT_CHILD_GETTERS(switchState);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::RouteFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::RouteFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::RouteFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::RouteFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::RouteFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::state::RouteFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::BlockedMacAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::BlockedMacAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::BlockedMacAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::macAddrToBlockVlanID, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::macAddrToBlockAddr, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::BlockedMacAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(macAddrToBlockVlanID);
    STRUCT_CHILD_GETTERS(macAddrToBlockAddr);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::PortPgConfigName, ::std::vector<::facebook::fboss::cfg::PortPgConfig>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::PortPgConfigName, ::std::vector<::facebook::fboss::cfg::PortPgConfig>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::PortPgConfigName, ::std::vector<::facebook::fboss::cfg::PortPgConfig>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortPgConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::cfg::PortPgConfigName, ::std::vector<::facebook::fboss::cfg::PortPgConfig>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::cfg::PortPgConfigName, ::std::vector<::facebook::fboss::cfg::PortPgConfig>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::PortPgConfigName);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::SflowCollectorFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::MirrorFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::MirrorFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::MirrorFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dscp, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::truncate, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::configHasEgressPort, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::egressPort, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::destinationIp, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::srcIp, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::udpSrcPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::udpDstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::tunnel, ChildThriftPath<::facebook::fboss::state::MirrorTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::isResolved, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, ChildThriftPath<::facebook::fboss::state::MirrorTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::MirrorFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(dscp);
    STRUCT_CHILD_GETTERS(truncate);
    STRUCT_CHILD_GETTERS(configHasEgressPort);
    STRUCT_CHILD_GETTERS(egressPort);
    STRUCT_CHILD_GETTERS(destinationIp);
    STRUCT_CHILD_GETTERS(srcIp);
    STRUCT_CHILD_GETTERS(udpSrcPort);
    STRUCT_CHILD_GETTERS(udpDstPort);
    STRUCT_CHILD_GETTERS(tunnel);
    STRUCT_CHILD_GETTERS(isResolved);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PacketRxReasonToQueue, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PacketRxReasonToQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PacketRxReasonToQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::rxReason, Child<::facebook::fboss::cfg::PacketRxReason, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::queueId, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::PacketRxReason, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::PacketRxReasonToQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(rxReason);
    STRUCT_CHILD_GETTERS(queueId);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::BufferPoolConfigName, ::facebook::fboss::cfg::BufferPoolConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::BufferPoolConfigName, ::facebook::fboss::cfg::BufferPoolConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::BufferPoolConfigName, ::facebook::fboss::cfg::BufferPoolConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::BufferPoolConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::cfg::BufferPoolConfigName, ::facebook::fboss::cfg::BufferPoolConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::cfg::BufferPoolConfigName, ::facebook::fboss::cfg::BufferPoolConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::BufferPoolConfigName);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::LoadBalancerFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::LoadBalancerFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::LoadBalancerFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::id, Child<::facebook::fboss::cfg::LoadBalancerID, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::algorithm, Child<::facebook::fboss::cfg::HashingAlgorithm, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::seed, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::v4Fields, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv4Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::v6Fields, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv6Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::transportFields, ChildThriftPath<::std::set<::facebook::fboss::cfg::TransportField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::mplsFields, ChildThriftPath<::std::set<::facebook::fboss::cfg::MPLSField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::udfGroups, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::LoadBalancerID, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::HashingAlgorithm, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv4Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::set<::facebook::fboss::cfg::IPv6Field>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::set<::facebook::fboss::cfg::TransportField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::set<::facebook::fboss::cfg::MPLSField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::LoadBalancerFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(algorithm);
    STRUCT_CHILD_GETTERS(seed);
    STRUCT_CHILD_GETTERS(v4Fields);
    STRUCT_CHILD_GETTERS(v6Fields);
    STRUCT_CHILD_GETTERS(transportFields);
    STRUCT_CHILD_GETTERS(mplsFields);
    STRUCT_CHILD_GETTERS(udfGroups);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::LoadBalancerID, ::facebook::fboss::state::LoadBalancerFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int16_t, ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int16_t, ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MediaLaneSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::MediaLaneSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MediaLaneSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::lane, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txDisable, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txSquelch, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txAdaptiveEqControl, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txSquelchForce, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::MediaLaneSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(lane);
    STRUCT_CHILD_GETTERS(txDisable);
    STRUCT_CHILD_GETTERS(txSquelch);
    STRUCT_CHILD_GETTERS(txAdaptiveEqControl);
    STRUCT_CHILD_GETTERS(txSquelchForce);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::CounterType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::CounterType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::CounterType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::CounterType, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::CounterType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::CounterType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Mirror, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Mirror,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Mirror,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::destination, ChildThriftPath<::facebook::fboss::cfg::MirrorDestination, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dscp, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::truncate, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::MirrorDestination, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::Mirror,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(destination);
    STRUCT_CHILD_GETTERS(dscp);
    STRUCT_CHILD_GETTERS(truncate);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::SystemPortFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int64_t, ::facebook::fboss::state::SystemPortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int64_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SwitchInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SwitchInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SwitchInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::switchType, Child<::facebook::fboss::cfg::SwitchType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::asicType, Child<::facebook::fboss::cfg::AsicType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::switchIndex, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::portIdRange, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::systemPortRange, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchMac, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::connectionHandle, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::SwitchType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::AsicType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::SwitchInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(switchType);
    STRUCT_CHILD_GETTERS(asicType);
    STRUCT_CHILD_GETTERS(switchIndex);
    STRUCT_CHILD_GETTERS(portIdRange);
    STRUCT_CHILD_GETTERS(systemPortRange);
    STRUCT_CHILD_GETTERS(switchMac);
    STRUCT_CHILD_GETTERS(connectionHandle);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::std::int8_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::std::int8_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   Parent>;
  using Child = Path<::std::int8_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, Self>;

  explicit ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::std::int8_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Vlan, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Vlan,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Vlan,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::id, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::recordStats, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::routable, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ipAddresses, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dhcpRelayAddressV4, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dhcpRelayAddressV6, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dhcpRelayOverridesV4, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dhcpRelayOverridesV6, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::intfID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::Vlan,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(recordStats);
    STRUCT_CHILD_GETTERS(routable);
    STRUCT_CHILD_GETTERS(ipAddresses);
    STRUCT_CHILD_GETTERS(dhcpRelayAddressV4);
    STRUCT_CHILD_GETTERS(dhcpRelayAddressV6);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV4);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV6);
    STRUCT_CHILD_GETTERS(intfID);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::QsfpServiceData, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::QsfpServiceData,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::QsfpServiceData,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::qsfp_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::config, ChildThriftPath<::facebook::fboss::cfg::QsfpServiceConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::state, ChildThriftPath<::facebook::fboss::state::QsfpState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::QsfpServiceConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::state::QsfpState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::QsfpServiceData,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(config);
    STRUCT_CHILD_GETTERS(state);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::BufferPoolFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::ChipConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::ChipConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::ChipConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent>;
  using strings = ::facebook::fboss::cfg::platform_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::bcm, ChildThriftPath<::facebook::fboss::bcm::BcmConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::asic, ChildThriftPath<::facebook::fboss::asic::AsicConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::bcm::BcmConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::asic::AsicConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::ChipConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(bcm);
    STRUCT_CHILD_GETTERS(asic);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QueueCongestionDetection, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QueueCongestionDetection,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QueueCongestionDetection,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::linear, ChildThriftPath<::facebook::fboss::cfg::LinearQueueCongestionDetection, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::LinearQueueCongestionDetection, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::QueueCongestionDetection,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(linear);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortPause, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortPause,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortPause,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::tx, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rx, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::PortPause,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(tx);
    STRUCT_CHILD_GETTERS(rx);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::DscpQosMap>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::DscpQosMap>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::DscpQosMap>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::DscpQosMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::DscpQosMap>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::DscpQosMap>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   Parent>;
  using Child = Path<::std::int16_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, Self>;

  explicit ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::IpTunnelFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::set<::facebook::fboss::cfg::MPLSField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::set<::facebook::fboss::cfg::MPLSField>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   Parent> {
 public:
  using Self = Path<
   ::std::set<::facebook::fboss::cfg::MPLSField>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::MPLSField, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, Self>;

  explicit ChildThriftPath<::std::set<::facebook::fboss::cfg::MPLSField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::set<::facebook::fboss::cfg::MPLSField>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::MPLSField);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::PortFlowletFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::BufferPoolConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::BufferPoolConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::BufferPoolConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::sharedBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::headroomBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::BufferPoolConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(sharedBytes);
    STRUCT_CHILD_GETTERS(headroomBytes);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::TeFlow, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::TeFlow,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::TeFlow,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::ctrl_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::srcPort, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dstPrefix, ChildThriftPath<::facebook::fboss::IpPrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::IpPrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::TeFlow,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(srcPort);
    STRUCT_CHILD_GETTERS(dstPrefix);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortPfc, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortPfc,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortPfc,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::tx, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rx, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::portPgConfigName, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::watchdog, ChildThriftPath<::facebook::fboss::cfg::PfcWatchdog, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::cfg::PfcWatchdog, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::PortPfc,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(tx);
    STRUCT_CHILD_GETTERS(rx);
    STRUCT_CHILD_GETTERS(portPgConfigName);
    STRUCT_CHILD_GETTERS(watchdog);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>,
   Parent>;
  using Child = Path<::std::string, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::string, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::string>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::LLDPTag);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::StaticRouteWithNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::StaticRouteWithNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::StaticRouteWithNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::routerID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::prefix, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::nexthops, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::StaticRouteWithNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(routerID);
    STRUCT_CHILD_GETTERS(prefix);
    STRUCT_CHILD_GETTERS(nexthops);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PmdState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PmdState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PmdState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::lanes, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::LaneState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::LaneState>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::PmdState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(lanes);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::HostLaneSettings>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::HostLaneSettings>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::HostLaneSettings>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HostLaneSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::HostLaneSettings>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::HostLaneSettings>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::network::thrift::BinaryAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::network::thrift::BinaryAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::network::thrift::Address_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::addr, Child<::folly::fbstring, ::apache::thrift::type_class::binary>>,
   std::pair<strings::port, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ifName, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::folly::fbstring, ::apache::thrift::type_class::binary>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::network::thrift::BinaryAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(addr);
    STRUCT_CHILD_GETTERS(port);
    STRUCT_CHILD_GETTERS(ifName);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::VlanPort>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::VlanPort>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::VlanPort>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::VlanPort, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::VlanPort>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::VlanPort>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::DscpQosMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::DscpQosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::DscpQosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::internalTrafficClass, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::fromDscpToTrafficClass, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::fromTrafficClassToDscp, Child<::std::int8_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::std::int8_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::DscpQosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(internalTrafficClass);
    STRUCT_CHILD_GETTERS(fromDscpToTrafficClass);
    STRUCT_CHILD_GETTERS(fromTrafficClassToDscp);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::ActiveQueueManagement, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::LabelForwardingEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AggregatePort>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AggregatePort>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AggregatePort>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::AggregatePort, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::AggregatePort>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::AggregatePort>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,
   Parent>;
  using Child = Path<::std::string, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::string, Self>;

  explicit ChildThriftPath<::std::map<::std::int32_t, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int32_t, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTable>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AclTable>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AclTable>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::AclTable, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTable>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::AclTable>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::CPUTrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::CPUTrafficPolicyConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::CPUTrafficPolicyConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::trafficPolicy, ChildThriftPath<::facebook::fboss::cfg::TrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::rxReasonToCPUQueue, ChildThriftPath<::std::map<::facebook::fboss::cfg::PacketRxReason, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::rxReasonToQueueOrderedList, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::TrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::facebook::fboss::cfg::PacketRxReason, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::CPUTrafficPolicyConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(trafficPolicy);
    STRUCT_CHILD_GETTERS(rxReasonToCPUQueue);
    STRUCT_CHILD_GETTERS(rxReasonToQueueOrderedList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortQueue, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::id, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::streamType, Child<::facebook::fboss::cfg::StreamType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::weight, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::reservedBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::scalingFactor, Child<::facebook::fboss::cfg::MMUScalingFactor, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::scheduling, Child<::facebook::fboss::cfg::QueueScheduling, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::packetsPerSec_DEPRECATED, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::sharedBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::aqms, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::portQueueRate, ChildThriftPath<::facebook::fboss::cfg::PortQueueRate, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::bandwidthBurstMinKbits, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::bandwidthBurstMaxKbits, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::StreamType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::cfg::MMUScalingFactor, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::cfg::QueueScheduling, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ActiveQueueManagement>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::facebook::fboss::cfg::PortQueueRate, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::PortQueue,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(streamType);
    STRUCT_CHILD_GETTERS(weight);
    STRUCT_CHILD_GETTERS(reservedBytes);
    STRUCT_CHILD_GETTERS(scalingFactor);
    STRUCT_CHILD_GETTERS(scheduling);
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(packetsPerSec_DEPRECATED);
    STRUCT_CHILD_GETTERS(sharedBytes);
    STRUCT_CHILD_GETTERS(aqms);
    STRUCT_CHILD_GETTERS(portQueueRate);
    STRUCT_CHILD_GETTERS(bandwidthBurstMinKbits);
    STRUCT_CHILD_GETTERS(bandwidthBurstMaxKbits);
};

template<typename Parent>
class ChildThriftPath<::std::set<::facebook::fboss::cfg::TransportField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::set<::facebook::fboss::cfg::TransportField>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   Parent> {
 public:
  using Self = Path<
   ::std::set<::facebook::fboss::cfg::TransportField>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::TransportField, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, Self>;

  explicit ChildThriftPath<::std::set<::facebook::fboss::cfg::TransportField>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::set<::facebook::fboss::cfg::TransportField>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::set<::apache::thrift::type_class::enumeration>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::TransportField);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::NeighborResponseEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::NeighborResponseEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::NeighborResponseEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::ipAddress, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::mac, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::interfaceId, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::NeighborResponseEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(ipAddress);
    STRUCT_CHILD_GETTERS(mac);
    STRUCT_CHILD_GETTERS(interfaceId);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Lacp, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Lacp,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Lacp,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::systemID, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::systemPriority, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::Lacp,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(systemID);
    STRUCT_CHILD_GETTERS(systemPriority);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::Mirror>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::Mirror>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::Mirror>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::Mirror, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::Mirror>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::Mirror>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SwitchConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SwitchConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SwitchConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::version, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ports, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Port>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::vlans, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Vlan>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::vlanPorts, ChildThriftPath<::std::vector<::facebook::fboss::cfg::VlanPort>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::defaultVlan, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::interfaces, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Interface>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::arpTimeoutSeconds, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::arpRefreshSeconds, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::arpAgerInterval, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::proactiveArp, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::cpuMAC, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::staticRoutesWithNhops, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteWithNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::staticRoutesToNull, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::staticRoutesToCPU, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::acls, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::maxNeighborProbes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::staleEntryInterval, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::aggregatePorts, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AggregatePort>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::clientIdToAdminDistance, ChildThriftPath<::std::map<::std::int32_t, ::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dhcpRelaySrcOverrideV4, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dhcpRelaySrcOverrideV6, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dhcpReplySrcOverrideV4, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dhcpReplySrcOverrideV6, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::globalEgressTrafficPolicy_DEPRECATED, ChildThriftPath<::facebook::fboss::cfg::TrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::config_version, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::sFlowCollectors, ChildThriftPath<::std::vector<::facebook::fboss::cfg::SflowCollector>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::lacp, ChildThriftPath<::facebook::fboss::cfg::Lacp, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::cpuQueues, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::cpuTrafficPolicy, ChildThriftPath<::facebook::fboss::cfg::CPUTrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::loadBalancers, ChildThriftPath<::std::vector<::facebook::fboss::cfg::LoadBalancer>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dataPlaneTrafficPolicy, ChildThriftPath<::facebook::fboss::cfg::TrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::mirrors, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Mirror>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::trafficCounters, ChildThriftPath<::std::vector<::facebook::fboss::cfg::TrafficCounter>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::qosPolicies, ChildThriftPath<::std::vector<::facebook::fboss::cfg::QosPolicy>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::defaultPortQueues, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::staticMplsRoutesWithNhops, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::staticMplsRoutesToNull, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::staticMplsRoutesToCPU, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::staticIp2MplsRoutes, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticIp2MplsRoute>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::portQueueConfigs, ChildThriftPath<::std::map<::facebook::fboss::cfg::PortQueueConfigName, ::std::vector<::facebook::fboss::cfg::PortQueue>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchSettings, ChildThriftPath<::facebook::fboss::cfg::SwitchSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::qcmConfig, ChildThriftPath<::facebook::fboss::cfg::QcmConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::portPgConfigs, ChildThriftPath<::std::map<::facebook::fboss::cfg::PortPgConfigName, ::std::vector<::facebook::fboss::cfg::PortPgConfig>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::bufferPoolConfigs, ChildThriftPath<::std::map<::facebook::fboss::cfg::BufferPoolConfigName, ::facebook::fboss::cfg::BufferPoolConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::aclTableGroup, ChildThriftPath<::facebook::fboss::cfg::AclTableGroup, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::sdkVersion, ChildThriftPath<::facebook::fboss::cfg::SdkVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ipInIpTunnels, ChildThriftPath<::std::vector<::facebook::fboss::cfg::IpInIpTunnel>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dsfNodes, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::udfConfig, ChildThriftPath<::facebook::fboss::cfg::UdfConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::flowletSwitchingConfig, ChildThriftPath<::facebook::fboss::cfg::FlowletSwitchingConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::defaultVoqConfig, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::portFlowletConfigs, ChildThriftPath<::std::map<::facebook::fboss::cfg::PortFlowletConfigName, ::facebook::fboss::cfg::PortFlowletConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Port>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Vlan>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::VlanPort>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Interface>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteWithNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AggregatePort>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, ChildThriftPath<::std::map<::std::int32_t, ::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, ChildThriftPath<::facebook::fboss::cfg::TrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::SflowCollector>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, ChildThriftPath<::facebook::fboss::cfg::Lacp, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, ChildThriftPath<::facebook::fboss::cfg::CPUTrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::LoadBalancer>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, ChildThriftPath<::facebook::fboss::cfg::TrafficPolicyConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 32>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::Mirror>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 33>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::TrafficCounter>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 34>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::QosPolicy>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 35>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 36>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteWithNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 37>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 38>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 39>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticIp2MplsRoute>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 40>, ChildThriftPath<::std::map<::facebook::fboss::cfg::PortQueueConfigName, ::std::vector<::facebook::fboss::cfg::PortQueue>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 41>, ChildThriftPath<::facebook::fboss::cfg::SwitchSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 42>, ChildThriftPath<::facebook::fboss::cfg::QcmConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 43>, ChildThriftPath<::std::map<::facebook::fboss::cfg::PortPgConfigName, ::std::vector<::facebook::fboss::cfg::PortPgConfig>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 44>, ChildThriftPath<::std::map<::facebook::fboss::cfg::BufferPoolConfigName, ::facebook::fboss::cfg::BufferPoolConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 45>, ChildThriftPath<::facebook::fboss::cfg::AclTableGroup, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 46>, ChildThriftPath<::facebook::fboss::cfg::SdkVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 47>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::IpInIpTunnel>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 48>, ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 49>, ChildThriftPath<::facebook::fboss::cfg::UdfConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 50>, ChildThriftPath<::facebook::fboss::cfg::FlowletSwitchingConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 51>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 52>, ChildThriftPath<::std::map<::facebook::fboss::cfg::PortFlowletConfigName, ::facebook::fboss::cfg::PortFlowletConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::SwitchConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(version);
    STRUCT_CHILD_GETTERS(ports);
    STRUCT_CHILD_GETTERS(vlans);
    STRUCT_CHILD_GETTERS(vlanPorts);
    STRUCT_CHILD_GETTERS(defaultVlan);
    STRUCT_CHILD_GETTERS(interfaces);
    STRUCT_CHILD_GETTERS(arpTimeoutSeconds);
    STRUCT_CHILD_GETTERS(arpRefreshSeconds);
    STRUCT_CHILD_GETTERS(arpAgerInterval);
    STRUCT_CHILD_GETTERS(proactiveArp);
    STRUCT_CHILD_GETTERS(cpuMAC);
    STRUCT_CHILD_GETTERS(staticRoutesWithNhops);
    STRUCT_CHILD_GETTERS(staticRoutesToNull);
    STRUCT_CHILD_GETTERS(staticRoutesToCPU);
    STRUCT_CHILD_GETTERS(acls);
    STRUCT_CHILD_GETTERS(maxNeighborProbes);
    STRUCT_CHILD_GETTERS(staleEntryInterval);
    STRUCT_CHILD_GETTERS(aggregatePorts);
    STRUCT_CHILD_GETTERS(clientIdToAdminDistance);
    STRUCT_CHILD_GETTERS(dhcpRelaySrcOverrideV4);
    STRUCT_CHILD_GETTERS(dhcpRelaySrcOverrideV6);
    STRUCT_CHILD_GETTERS(dhcpReplySrcOverrideV4);
    STRUCT_CHILD_GETTERS(dhcpReplySrcOverrideV6);
    STRUCT_CHILD_GETTERS(globalEgressTrafficPolicy_DEPRECATED);
    STRUCT_CHILD_GETTERS(config_version);
    STRUCT_CHILD_GETTERS(sFlowCollectors);
    STRUCT_CHILD_GETTERS(lacp);
    STRUCT_CHILD_GETTERS(cpuQueues);
    STRUCT_CHILD_GETTERS(cpuTrafficPolicy);
    STRUCT_CHILD_GETTERS(loadBalancers);
    STRUCT_CHILD_GETTERS(dataPlaneTrafficPolicy);
    STRUCT_CHILD_GETTERS(mirrors);
    STRUCT_CHILD_GETTERS(trafficCounters);
    STRUCT_CHILD_GETTERS(qosPolicies);
    STRUCT_CHILD_GETTERS(defaultPortQueues);
    STRUCT_CHILD_GETTERS(staticMplsRoutesWithNhops);
    STRUCT_CHILD_GETTERS(staticMplsRoutesToNull);
    STRUCT_CHILD_GETTERS(staticMplsRoutesToCPU);
    STRUCT_CHILD_GETTERS(staticIp2MplsRoutes);
    STRUCT_CHILD_GETTERS(portQueueConfigs);
    STRUCT_CHILD_GETTERS(switchSettings);
    STRUCT_CHILD_GETTERS(qcmConfig);
    STRUCT_CHILD_GETTERS(portPgConfigs);
    STRUCT_CHILD_GETTERS(bufferPoolConfigs);
    STRUCT_CHILD_GETTERS(aclTableGroup);
    STRUCT_CHILD_GETTERS(sdkVersion);
    STRUCT_CHILD_GETTERS(ipInIpTunnels);
    STRUCT_CHILD_GETTERS(dsfNodes);
    STRUCT_CHILD_GETTERS(udfConfig);
    STRUCT_CHILD_GETTERS(flowletSwitchingConfig);
    STRUCT_CHILD_GETTERS(defaultVoqConfig);
    STRUCT_CHILD_GETTERS(portFlowletConfigs);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MinimumCapacity, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MinimumCapacity,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MinimumCapacity,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::linkCount, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::linkPercentage, Child<double, ::apache::thrift::type_class::floating_point>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<double, ::apache::thrift::type_class::floating_point>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::MinimumCapacity,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(linkCount);
    STRUCT_CHILD_GETTERS(linkPercentage);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::sendToQueue, ChildThriftPath<::facebook::fboss::cfg::QueueMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::packetCounter_DEPRECATED, ChildThriftPath<::facebook::fboss::cfg::PacketCounterMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::setDscp, ChildThriftPath<::facebook::fboss::cfg::SetDscpMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ingressMirror, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::egressMirror, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::counter, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::toCpuAction, Child<::facebook::fboss::cfg::ToCpuAction, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::macsecFlow, ChildThriftPath<::facebook::fboss::cfg::MacsecFlowAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::redirectToNextHop, ChildThriftPath<::facebook::fboss::cfg::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::QueueMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::PacketCounterMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::SetDscpMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::facebook::fboss::cfg::ToCpuAction, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::facebook::fboss::cfg::MacsecFlowAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::facebook::fboss::cfg::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::MatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(sendToQueue);
    STRUCT_CHILD_GETTERS(packetCounter_DEPRECATED);
    STRUCT_CHILD_GETTERS(setDscp);
    STRUCT_CHILD_GETTERS(ingressMirror);
    STRUCT_CHILD_GETTERS(egressMirror);
    STRUCT_CHILD_GETTERS(counter);
    STRUCT_CHILD_GETTERS(toCpuAction);
    STRUCT_CHILD_GETTERS(macsecFlow);
    STRUCT_CHILD_GETTERS(redirectToNextHop);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MacsecFlowAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MacsecFlowAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MacsecFlowAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::flowId, Child<uint64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::action, Child<::facebook::fboss::cfg::MacsecFlowPacketAction, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<uint64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::MacsecFlowPacketAction, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::MacsecFlowAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(flowId);
    STRUCT_CHILD_GETTERS(action);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::TransceiverConfigOverride>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::TransceiverConfigOverride>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::TransceiverConfigOverride>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::TransceiverConfigOverride, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::TransceiverConfigOverride>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::TransceiverConfigOverride>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Ttl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Ttl,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Ttl,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::value, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::mask, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::Ttl,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(value);
    STRUCT_CHILD_GETTERS(mask);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::IpTunnelFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::FlowletSwitchingConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::FlowletSwitchingConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::FlowletSwitchingConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::inactivityIntervalUsecs, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::flowletTableSize, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dynamicEgressLoadExponent, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dynamicQueueExponent, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dynamicQueueMinThresholdBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dynamicQueueMaxThresholdBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dynamicSampleRate, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dynamicEgressMinThresholdBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dynamicEgressMaxThresholdBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dynamicPhysicalQueueExponent, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::FlowletSwitchingConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(inactivityIntervalUsecs);
    STRUCT_CHILD_GETTERS(flowletTableSize);
    STRUCT_CHILD_GETTERS(dynamicEgressLoadExponent);
    STRUCT_CHILD_GETTERS(dynamicQueueExponent);
    STRUCT_CHILD_GETTERS(dynamicQueueMinThresholdBytes);
    STRUCT_CHILD_GETTERS(dynamicQueueMaxThresholdBytes);
    STRUCT_CHILD_GETTERS(dynamicSampleRate);
    STRUCT_CHILD_GETTERS(dynamicEgressMinThresholdBytes);
    STRUCT_CHILD_GETTERS(dynamicEgressMaxThresholdBytes);
    STRUCT_CHILD_GETTERS(dynamicPhysicalQueueExponent);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::AggregatePortFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::AggregatePortFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::AggregatePortFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::id, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::description, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::systemPriority, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::systemID, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::minimumLinkCount, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ports, ChildThriftPath<::std::vector<::facebook::fboss::state::Subport>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::portToFwdState, ChildThriftPath<::std::map<::std::int32_t, bool>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::portToPartnerState, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::ParticipantInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::interfaceIDs, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::vector<::facebook::fboss::state::Subport>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::map<::std::int32_t, bool>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::ParticipantInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::AggregatePortFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(description);
    STRUCT_CHILD_GETTERS(systemPriority);
    STRUCT_CHILD_GETTERS(systemID);
    STRUCT_CHILD_GETTERS(minimumLinkCount);
    STRUCT_CHILD_GETTERS(ports);
    STRUCT_CHILD_GETTERS(portToFwdState);
    STRUCT_CHILD_GETTERS(portToPartnerState);
    STRUCT_CHILD_GETTERS(interfaceIDs);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortPgConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::PortPgConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::PortPgConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::PortPgConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortPgConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::PortPgConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::NeighborResponseEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::RxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::RxSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::RxSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::ctlCode, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dspMode, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::afeTrim, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::acCouplingBypass, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::channelReach, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::diffEncoderEn, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::fbfCoefInitVal, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::fbfLmsEnable, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::instgScanOptimize, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::instgTableEndRow, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::instgTableStartRow, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::parityEncoderEn, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::thpEn, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dcTermEn, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::setPrecode, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::RxSettings,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(ctlCode);
    STRUCT_CHILD_GETTERS(dspMode);
    STRUCT_CHILD_GETTERS(afeTrim);
    STRUCT_CHILD_GETTERS(acCouplingBypass);
    STRUCT_CHILD_GETTERS(channelReach);
    STRUCT_CHILD_GETTERS(diffEncoderEn);
    STRUCT_CHILD_GETTERS(fbfCoefInitVal);
    STRUCT_CHILD_GETTERS(fbfLmsEnable);
    STRUCT_CHILD_GETTERS(instgScanOptimize);
    STRUCT_CHILD_GETTERS(instgTableEndRow);
    STRUCT_CHILD_GETTERS(instgTableStartRow);
    STRUCT_CHILD_GETTERS(parityEncoderEn);
    STRUCT_CHILD_GETTERS(thpEn);
    STRUCT_CHILD_GETTERS(dcTermEn);
    STRUCT_CHILD_GETTERS(setPrecode);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PlatformConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PlatformConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PlatformConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::platform_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::chip, ChildThriftPath<::facebook::fboss::cfg::ChipConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::platformSettings, ChildThriftPath<::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchIndexToSwitchId, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchIndexToChipConfigs, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::cfg::ChipConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchIndexToPlatformSettings, ChildThriftPath<::std::map<::std::int16_t, ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::ChipConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::cfg::ChipConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::std::int16_t, ::std::map<::facebook::fboss::cfg::PlatformAttributes, ::std::string>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::PlatformConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(chip);
    STRUCT_CHILD_GETTERS(platformSettings);
    STRUCT_CHILD_GETTERS(switchIndexToSwitchId);
    STRUCT_CHILD_GETTERS(switchIndexToChipConfigs);
    STRUCT_CHILD_GETTERS(switchIndexToPlatformSettings);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::MatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::MatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::MatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::sendToQueue, ChildThriftPath<::facebook::fboss::state::SendToQueue, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::trafficCounter, ChildThriftPath<::facebook::fboss::cfg::TrafficCounter, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::setDscp, ChildThriftPath<::facebook::fboss::cfg::SetDscpMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ingressMirror, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::egressMirror, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::toCpuAction, Child<::facebook::fboss::cfg::ToCpuAction, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::macsecFlow, ChildThriftPath<::facebook::fboss::cfg::MacsecFlowAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::redirectToNextHop, ChildThriftPath<::facebook::fboss::state::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::state::SendToQueue, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::TrafficCounter, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::SetDscpMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::cfg::ToCpuAction, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::cfg::MacsecFlowAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::facebook::fboss::state::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::MatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(sendToQueue);
    STRUCT_CHILD_GETTERS(trafficCounter);
    STRUCT_CHILD_GETTERS(setDscp);
    STRUCT_CHILD_GETTERS(ingressMirror);
    STRUCT_CHILD_GETTERS(egressMirror);
    STRUCT_CHILD_GETTERS(toCpuAction);
    STRUCT_CHILD_GETTERS(macsecFlow);
    STRUCT_CHILD_GETTERS(redirectToNextHop);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::PacketRxReasonToQueue, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::PacketRxReasonToQueue>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortQueueRate, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortQueueRate,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortQueueRate,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::pktsPerSec, ChildThriftPath<::facebook::fboss::cfg::Range, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::kbitsPerSec, ChildThriftPath<::facebook::fboss::cfg::Range, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::Range, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::Range, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::PortQueueRate,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(pktsPerSec);
    STRUCT_CHILD_GETTERS(kbitsPerSec);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::NextHopThrift>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::NextHopThrift>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::NextHopThrift, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::NextHopThrift>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SflowCollector, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SflowCollector,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SflowCollector,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::ip, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::port, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::SflowCollector,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(ip);
    STRUCT_CHILD_GETTERS(port);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::SflowCollector>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::SflowCollector>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::SflowCollector>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::SflowCollector, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::SflowCollector>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::SflowCollector>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Range64, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Range64,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Range64,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::minimum, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::maximum, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::Range64,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(minimum);
    STRUCT_CHILD_GETTERS(maximum);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MatchToAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MatchToAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MatchToAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::matcher, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::action, ChildThriftPath<::facebook::fboss::cfg::MatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::MatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::MatchToAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(matcher);
    STRUCT_CHILD_GETTERS(action);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::IpInIpTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::IpInIpTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::IpInIpTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::ipInIpTunnelId, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::underlayIntfID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dstIp, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::srcIp, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dstIpMask, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::srcIpMask, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::ttlMode, Child<::facebook::fboss::cfg::IpTunnelMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::dscpMode, Child<::facebook::fboss::cfg::IpTunnelMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::ecnMode, Child<::facebook::fboss::cfg::IpTunnelMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::tunnelTermType, Child<::facebook::fboss::cfg::TunnelTerminationType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::tunnelType, Child<::facebook::fboss::cfg::TunnelType, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::facebook::fboss::cfg::IpTunnelMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::facebook::fboss::cfg::IpTunnelMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::facebook::fboss::cfg::IpTunnelMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::facebook::fboss::cfg::TunnelTerminationType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::facebook::fboss::cfg::TunnelType, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::IpInIpTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(ipInIpTunnelId);
    STRUCT_CHILD_GETTERS(underlayIntfID);
    STRUCT_CHILD_GETTERS(dstIp);
    STRUCT_CHILD_GETTERS(srcIp);
    STRUCT_CHILD_GETTERS(dstIpMask);
    STRUCT_CHILD_GETTERS(srcIpMask);
    STRUCT_CHILD_GETTERS(ttlMode);
    STRUCT_CHILD_GETTERS(dscpMode);
    STRUCT_CHILD_GETTERS(ecnMode);
    STRUCT_CHILD_GETTERS(tunnelTermType);
    STRUCT_CHILD_GETTERS(tunnelType);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   Parent>;
  using Child = Path<::std::int32_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, Self>;

  explicit ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::L4PortRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::L4PortRange,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::L4PortRange,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::min, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::max, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::invert, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::L4PortRange,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(min);
    STRUCT_CHILD_GETTERS(max);
    STRUCT_CHILD_GETTERS(invert);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::StaticMplsRouteWithNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::StaticMplsRouteWithNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::StaticMplsRouteWithNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::ingressLabel, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::nexthops, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::StaticMplsRouteWithNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(ingressLabel);
    STRUCT_CHILD_GETTERS(nexthops);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::AclTableGroupFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::AclTableGroupFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::AclTableGroupFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::stage, Child<::facebook::fboss::cfg::AclStage, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::aclTableMap, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclTableFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::cfg::AclStage, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclTableFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::AclTableGroupFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(stage);
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(aclTableMap);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::state::PortPgFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::state::PortPgFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::state::PortPgFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::PortPgFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::state::PortPgFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::state::PortPgFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::StaticMplsRouteNoNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::StaticMplsRouteNoNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::StaticMplsRouteNoNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::StaticMplsRouteNoNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::StaticMplsRouteNoNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::ingressLabel, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::StaticMplsRouteNoNextHops,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(ingressLabel);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::PortQueueFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::PortQueueFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::PortQueueFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::PortQueueFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Interface, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Interface,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Interface,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::intfID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::routerID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::vlanID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::mac, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::ipAddresses, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ndp, ChildThriftPath<::facebook::fboss::cfg::NdpConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::mtu, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::isVirtual, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::isStateSyncDisabled, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::type, Child<::facebook::fboss::cfg::InterfaceType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::dhcpRelayAddressV4, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dhcpRelayAddressV6, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dhcpRelayOverridesV4, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dhcpRelayOverridesV6, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::cfg::NdpConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::facebook::fboss::cfg::InterfaceType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::Interface,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(intfID);
    STRUCT_CHILD_GETTERS(routerID);
    STRUCT_CHILD_GETTERS(vlanID);
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(mac);
    STRUCT_CHILD_GETTERS(ipAddresses);
    STRUCT_CHILD_GETTERS(ndp);
    STRUCT_CHILD_GETTERS(mtu);
    STRUCT_CHILD_GETTERS(isVirtual);
    STRUCT_CHILD_GETTERS(isStateSyncDisabled);
    STRUCT_CHILD_GETTERS(type);
    STRUCT_CHILD_GETTERS(dhcpRelayAddressV4);
    STRUCT_CHILD_GETTERS(dhcpRelayAddressV6);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV4);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV6);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::AclEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::AclEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::AclEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::AclEntry>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::std::int64_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::std::int64_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent>;
  using Child = Path<::std::int64_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, Self>;

  explicit ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int16_t, ::std::int64_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent>;
  using Child = Path<::std::int32_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, Self>;

  explicit ChildThriftPath<::std::map<::std::int32_t, ::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int32_t, ::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Port, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Port,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Port,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::logicalID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::state, Child<::facebook::fboss::cfg::PortState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::minFrameSize, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::maxFrameSize, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::parserType, Child<::facebook::fboss::cfg::ParserType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::routable, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ingressVlan, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::speed, Child<::facebook::fboss::cfg::PortSpeed, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::description, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::queues_DEPRECATED, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::pause, ChildThriftPath<::facebook::fboss::cfg::PortPause, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::sFlowIngressRate, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::sFlowEgressRate, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::loopbackMode, Child<::facebook::fboss::cfg::PortLoopbackMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::ingressMirror, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::egressMirror, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::expectedLLDPValues, ChildThriftPath<::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::sampleDest, Child<::facebook::fboss::cfg::SampleDestination, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::portQueueConfigName, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::lookupClasses, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclLookupClass>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::profileID, Child<::facebook::fboss::cfg::PortProfileID, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::pfc, ChildThriftPath<::facebook::fboss::cfg::PortPfc, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::counterTags, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::portType, Child<::facebook::fboss::cfg::PortType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::expectedNeighborReachability, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::drainState, Child<::facebook::fboss::cfg::PortDrainState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::flowletConfigName, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::PortState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::cfg::ParserType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::facebook::fboss::cfg::PortSpeed, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, ChildThriftPath<::facebook::fboss::cfg::PortPause, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::facebook::fboss::cfg::PortLoopbackMode, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, ChildThriftPath<::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::facebook::fboss::cfg::SampleDestination, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclLookupClass>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, Child<::facebook::fboss::cfg::PortProfileID, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, ChildThriftPath<::facebook::fboss::cfg::PortPfc, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, Child<::facebook::fboss::cfg::PortType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, Child<::facebook::fboss::cfg::PortDrainState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::Port,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(logicalID);
    STRUCT_CHILD_GETTERS(state);
    STRUCT_CHILD_GETTERS(minFrameSize);
    STRUCT_CHILD_GETTERS(maxFrameSize);
    STRUCT_CHILD_GETTERS(parserType);
    STRUCT_CHILD_GETTERS(routable);
    STRUCT_CHILD_GETTERS(ingressVlan);
    STRUCT_CHILD_GETTERS(speed);
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(description);
    STRUCT_CHILD_GETTERS(queues_DEPRECATED);
    STRUCT_CHILD_GETTERS(pause);
    STRUCT_CHILD_GETTERS(sFlowIngressRate);
    STRUCT_CHILD_GETTERS(sFlowEgressRate);
    STRUCT_CHILD_GETTERS(loopbackMode);
    STRUCT_CHILD_GETTERS(ingressMirror);
    STRUCT_CHILD_GETTERS(egressMirror);
    STRUCT_CHILD_GETTERS(expectedLLDPValues);
    STRUCT_CHILD_GETTERS(sampleDest);
    STRUCT_CHILD_GETTERS(portQueueConfigName);
    STRUCT_CHILD_GETTERS(lookupClasses);
    STRUCT_CHILD_GETTERS(profileID);
    STRUCT_CHILD_GETTERS(pfc);
    STRUCT_CHILD_GETTERS(counterTags);
    STRUCT_CHILD_GETTERS(portType);
    STRUCT_CHILD_GETTERS(expectedNeighborReachability);
    STRUCT_CHILD_GETTERS(drainState);
    STRUCT_CHILD_GETTERS(flowletConfigName);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::StaticIp2MplsRoute, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::StaticIp2MplsRoute,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::StaticIp2MplsRoute,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::routerID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::prefix, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::nexthops, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::StaticIp2MplsRoute,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(routerID);
    STRUCT_CHILD_GETTERS(prefix);
    STRUCT_CHILD_GETTERS(nexthops);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::InterfaceFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::InterfaceFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AclTableGroup, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AclTableGroup,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AclTableGroup,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::aclTables, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTable>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::stage, Child<::facebook::fboss::cfg::AclStage, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTable>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::AclStage, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::AclTableGroup,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(aclTables);
    STRUCT_CHILD_GETTERS(stage);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::PortFlowletFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::PortFlowletFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::PortFlowletFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::id, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::scalingFactor, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::loadWeight, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::queueWeight, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::PortFlowletFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(scalingFactor);
    STRUCT_CHILD_GETTERS(loadWeight);
    STRUCT_CHILD_GETTERS(queueWeight);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::state::Subport>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::state::Subport>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::state::Subport>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::Subport, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::state::Subport>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::state::Subport>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::PortQueueConfigName, ::std::vector<::facebook::fboss::cfg::PortQueue>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::PortQueueConfigName, ::std::vector<::facebook::fboss::cfg::PortQueue>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::PortQueueConfigName, ::std::vector<::facebook::fboss::cfg::PortQueue>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortQueue>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::cfg::PortQueueConfigName, ::std::vector<::facebook::fboss::cfg::PortQueue>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::cfg::PortQueueConfigName, ::std::vector<::facebook::fboss::cfg::PortQueue>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::PortQueueConfigName);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PfcWatchdog, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PfcWatchdog,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PfcWatchdog,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::detectionTimeMsecs, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::recoveryTimeMsecs, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::recoveryAction, Child<::facebook::fboss::cfg::PfcWatchdogRecoveryAction, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::PfcWatchdogRecoveryAction, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::PfcWatchdog,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(detectionTimeMsecs);
    STRUCT_CHILD_GETTERS(recoveryTimeMsecs);
    STRUCT_CHILD_GETTERS(recoveryAction);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::PortFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::TransceiverSpecFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::TransceiverSpecFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::cfg::ChipConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::cfg::ChipConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::variant>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::cfg::ChipConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::variant>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::ChipConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::cfg::ChipConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int16_t, ::facebook::fboss::cfg::ChipConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::variant>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::SwitchInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int64_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::MacAndVlan>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::MacAndVlan>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::MacAndVlan>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::MacAndVlan, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::MacAndVlan>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::MacAndVlan>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::SetDscpMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::SetDscpMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::SetDscpMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::dscpValue, Child<::std::int8_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::SetDscpMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(dscpValue);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::enumeration>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::enumeration>,
   Parent>;
  using Child = Path<::facebook::fboss::cfg::SwitchType, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::enumeration, Self>;

  explicit ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int64_t, ::facebook::fboss::cfg::SwitchType>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::enumeration>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int64_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QueueMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QueueMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QueueMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::queueId, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::QueueMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(queueId);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PacketCounterMatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PacketCounterMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PacketCounterMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::counterName, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::PacketCounterMatchAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(counterName);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MacAndVlan, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MacAndVlan,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MacAndVlan,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::vlanID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::macAddress, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::MacAndVlan,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(vlanID);
    STRUCT_CHILD_GETTERS(macAddress);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::UdfPacketMatcher>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::cfg::UdfPacketMatcher>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::cfg::UdfPacketMatcher>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::UdfPacketMatcher, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::cfg::UdfPacketMatcher>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::cfg::UdfPacketMatcher>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::ExactMatchTableConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::ExactMatchTableConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::ExactMatchTableConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dstPrefixLength, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::ExactMatchTableConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(dstPrefixLength);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PinID, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PinID,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PinID,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::chip, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::lane, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::PinID,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(chip);
    STRUCT_CHILD_GETTERS(lane);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::RedirectNextHop>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::RedirectNextHop>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::RedirectNextHop>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::RedirectNextHop, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::RedirectNextHop>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::RedirectNextHop>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::Neighbor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::Neighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::Neighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::vlanID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ipAddress, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::Neighbor,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(vlanID);
    STRUCT_CHILD_GETTERS(ipAddress);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QosRule, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QosRule,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QosRule,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::queueId, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dscp, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::QosRule,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(queueId);
    STRUCT_CHILD_GETTERS(dscp);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::TrafficCounter, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::TrafficCounter,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::TrafficCounter,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::types, ChildThriftPath<::std::vector<::facebook::fboss::cfg::CounterType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::CounterType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::TrafficCounter,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(types);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PinConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PinConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PinConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::id, ChildThriftPath<::facebook::fboss::phy::PinID, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::tx, ChildThriftPath<::facebook::fboss::phy::TxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::rx, ChildThriftPath<::facebook::fboss::phy::RxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::laneMap, ChildThriftPath<::facebook::fboss::phy::LaneMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::polaritySwap, ChildThriftPath<::facebook::fboss::phy::PolaritySwap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::phy::PinID, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::phy::TxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::phy::RxSettings, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::phy::LaneMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::phy::PolaritySwap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::PinConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(tx);
    STRUCT_CHILD_GETTERS(rx);
    STRUCT_CHILD_GETTERS(laneMap);
    STRUCT_CHILD_GETTERS(polaritySwap);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::NdpConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::NdpConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::NdpConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::routerAdvertisementSeconds, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::curHopLimit, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::routerLifetime, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::prefixValidLifetimeSeconds, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::prefixPreferredLifetimeSeconds, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::routerAdvertisementManagedBit, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::routerAdvertisementOtherBit, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::routerAddress, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::NdpConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(routerAdvertisementSeconds);
    STRUCT_CHILD_GETTERS(curHopLimit);
    STRUCT_CHILD_GETTERS(routerLifetime);
    STRUCT_CHILD_GETTERS(prefixValidLifetimeSeconds);
    STRUCT_CHILD_GETTERS(prefixPreferredLifetimeSeconds);
    STRUCT_CHILD_GETTERS(routerAdvertisementManagedBit);
    STRUCT_CHILD_GETTERS(routerAdvertisementOtherBit);
    STRUCT_CHILD_GETTERS(routerAddress);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QosPolicy, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QosPolicy,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QosPolicy,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::rules, ChildThriftPath<::std::vector<::facebook::fboss::cfg::QosRule>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::qosMap, ChildThriftPath<::facebook::fboss::cfg::QosMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::QosRule>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::QosMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::QosPolicy,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(rules);
    STRUCT_CHILD_GETTERS(qosMap);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::AclTableFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::AclTableFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::AclTableFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::id, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::priority, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::aclMap, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::actionTypes, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableActionType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::qualifiers, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableQualifier>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableActionType>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclTableQualifier>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::AclTableFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(priority);
    STRUCT_CHILD_GETTERS(aclMap);
    STRUCT_CHILD_GETTERS(actionTypes);
    STRUCT_CHILD_GETTERS(qualifiers);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::CabledTestPair>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::CabledTestPair>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::CabledTestPair>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::CabledTestPair, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::CabledTestPair>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::CabledTestPair>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MirrorDestination, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MirrorDestination,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MirrorDestination,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::egressPort, ChildThriftPath<::facebook::fboss::cfg::MirrorEgressPort, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ip, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::tunnel, ChildThriftPath<::facebook::fboss::cfg::MirrorTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::MirrorEgressPort, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::MirrorTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::MirrorDestination,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(egressPort);
    STRUCT_CHILD_GETTERS(ip);
    STRUCT_CHILD_GETTERS(tunnel);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::SflowCollectorFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int64_t, ::facebook::fboss::cfg::DsfNode>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int32_t, ::facebook::fboss::state::LabelForwardingEntryFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AggregatePortMember, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AggregatePortMember,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AggregatePortMember,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::memberPortID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::priority, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rate, Child<::facebook::fboss::cfg::LacpPortRate, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::activity, Child<::facebook::fboss::cfg::LacpPortActivity, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::holdTimerMultiplier, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::LacpPortRate, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::cfg::LacpPortActivity, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::AggregatePortMember,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(memberPortID);
    STRUCT_CHILD_GETTERS(priority);
    STRUCT_CHILD_GETTERS(rate);
    STRUCT_CHILD_GETTERS(activity);
    STRUCT_CHILD_GETTERS(holdTimerMultiplier);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::ControlPlaneFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::ControlPlaneFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::ControlPlaneFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::ControlPlaneFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::ControlPlaneFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::facebook::fboss::state::ControlPlaneFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>,
   Parent>;
  using Child = Path<::std::string, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::string, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::std::string>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::PortFlowletConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::PortFlowletConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::PortFlowletConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::scalingFactor, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::loadWeight, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::queueWeight, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::PortFlowletConfig,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(scalingFactor);
    STRUCT_CHILD_GETTERS(loadWeight);
    STRUCT_CHILD_GETTERS(queueWeight);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::FibContainerFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::MirrorFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::MirrorFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::BufferPoolFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::ParticipantInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::ParticipantInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::ParticipantInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::systemPriority, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::systemID, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::key, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::portPriority, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::port, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::state, Child<::facebook::fboss::state::LacpState, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::state::LacpState, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::ParticipantInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(systemPriority);
    STRUCT_CHILD_GETTERS(systemID);
    STRUCT_CHILD_GETTERS(key);
    STRUCT_CHILD_GETTERS(portPriority);
    STRUCT_CHILD_GETTERS(port);
    STRUCT_CHILD_GETTERS(state);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::AggregatePortFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::AggregatePortFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::ParticipantInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::ParticipantInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::ParticipantInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::ParticipantInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::state::ParticipantInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int32_t, ::facebook::fboss::state::ParticipantInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::std::set<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::std::set<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::std::set<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>,
   Parent>;
  using Child = ChildThriftPath<::std::set<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int32_t, ::std::set<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int32_t, ::std::set<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, bool>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, bool>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, bool>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent>;
  using Child = Path<bool, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, Self>;

  explicit ChildThriftPath<::std::map<::std::int32_t, bool>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int32_t, bool>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::VlanFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int16_t, ::facebook::fboss::state::VlanFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::VlanInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::VlanInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::VlanInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::VlanInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::VlanInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::state::VlanInfo>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PhyState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PhyState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PhyState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::phyChip, ChildThriftPath<::facebook::fboss::phy::DataPlanePhyChip, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::fwVersion, ChildThriftPath<::facebook::fboss::phy::PhyFwVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::speed, Child<::facebook::fboss::cfg::PortSpeed, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::linkState, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::system, ChildThriftPath<::facebook::fboss::phy::PhySideState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::line, ChildThriftPath<::facebook::fboss::phy::PhySideState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::switchID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::timeCollected, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::phy::DataPlanePhyChip, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::phy::PhyFwVersion, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::PortSpeed, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::phy::PhySideState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::phy::PhySideState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::PhyState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(phyChip);
    STRUCT_CHILD_GETTERS(fwVersion);
    STRUCT_CHILD_GETTERS(speed);
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(linkState);
    STRUCT_CHILD_GETTERS(system);
    STRUCT_CHILD_GETTERS(line);
    STRUCT_CHILD_GETTERS(switchID);
    STRUCT_CHILD_GETTERS(timeCollected);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::NeighborEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MediaLaneSignals, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::MediaLaneSignals,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MediaLaneSignals,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::lane, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txLos, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rxLos, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txLol, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::rxLol, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txFault, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txAdaptEqFault, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::MediaLaneSignals,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(lane);
    STRUCT_CHILD_GETTERS(txLos);
    STRUCT_CHILD_GETTERS(rxLos);
    STRUCT_CHILD_GETTERS(txLol);
    STRUCT_CHILD_GETTERS(rxLol);
    STRUCT_CHILD_GETTERS(txFault);
    STRUCT_CHILD_GETTERS(txAdaptEqFault);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::AclEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::state::AclEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::state::BlockedMacAddress>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::state::BlockedMacAddress>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::state::BlockedMacAddress>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::BlockedMacAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::state::BlockedMacAddress>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::state::BlockedMacAddress>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::Neighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::Neighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::Neighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::Neighbor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::Neighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::Neighbor>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::MKASakKey, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::MKASakKey,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::MKASakKey,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::sci, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::associationNum, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::MKASakKey,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(sci);
    STRUCT_CHILD_GETTERS(associationNum);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::BufferPoolFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::BufferPoolFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::BufferPoolFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::id, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::headroomBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::sharedBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::BufferPoolFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(headroomBytes);
    STRUCT_CHILD_GETTERS(sharedBytes);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::TrafficClassToQosAttributeEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::TrafficClassToQosAttributeEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::TrafficClassToQosAttributeEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::trafficClass, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::attr, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::TrafficClassToQosAttributeEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(trafficClass);
    STRUCT_CHILD_GETTERS(attr);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::MacEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::MacEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::MacEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::mac, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::portId, ChildThriftPath<::facebook::fboss::cfg::PortDescriptor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::classID, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::type, Child<::facebook::fboss::state::MacEntryType, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::cfg::PortDescriptor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::state::MacEntryType, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::MacEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(mac);
    STRUCT_CHILD_GETTERS(portId);
    STRUCT_CHILD_GETTERS(classID);
    STRUCT_CHILD_GETTERS(type);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::Port>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::Port>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::Port>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::Port, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::Port>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::Port>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, bool>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, bool>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, bool>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent>;
  using Child = Path<bool, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, Self>;

  explicit ChildThriftPath<::std::map<::std::int16_t, bool>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int16_t, bool>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::RouteFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::RouteFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::RouteFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::prefix, ChildThriftPath<::facebook::fboss::state::RoutePrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::nexthopsmulti, ChildThriftPath<::facebook::fboss::state::RouteNextHopsMulti, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::fwd, ChildThriftPath<::facebook::fboss::state::RouteNextHopEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::flags, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::classID, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::state::RoutePrefix, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::state::RouteNextHopsMulti, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::state::RouteNextHopEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::RouteFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(prefix);
    STRUCT_CHILD_GETTERS(nexthopsmulti);
    STRUCT_CHILD_GETTERS(fwd);
    STRUCT_CHILD_GETTERS(flags);
    STRUCT_CHILD_GETTERS(classID);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::NeighborEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::NeighborEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::NeighborEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::ipaddress, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::mac, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::portId, ChildThriftPath<::facebook::fboss::cfg::PortDescriptor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::interfaceId, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::state, Child<::facebook::fboss::state::NeighborState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::classID, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::encapIndex, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::isLocal, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::type, Child<::facebook::fboss::state::NeighborEntryType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::resolvedSince, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::cfg::PortDescriptor, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::state::NeighborState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::facebook::fboss::state::NeighborEntryType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::NeighborEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(ipaddress);
    STRUCT_CHILD_GETTERS(mac);
    STRUCT_CHILD_GETTERS(portId);
    STRUCT_CHILD_GETTERS(interfaceId);
    STRUCT_CHILD_GETTERS(state);
    STRUCT_CHILD_GETTERS(classID);
    STRUCT_CHILD_GETTERS(encapIndex);
    STRUCT_CHILD_GETTERS(isLocal);
    STRUCT_CHILD_GETTERS(type);
    STRUCT_CHILD_GETTERS(resolvedSince);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::MacEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::MacEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::MacEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::MacEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::MacEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::state::MacEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>,
   Parent>;
  using Child = Path<::std::int16_t, ::facebook::fboss::fsdb::FsdbOperStateRoot, ::apache::thrift::type_class::integral, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::std::int16_t>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::AclEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::AclEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::AclEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::priority, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::srcIp, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dstIp, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::proto, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::tcpFlagsBitMap, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::srcPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ipFrag, Child<::facebook::fboss::cfg::IpFragMatch, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::icmpType, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::icmpCode, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dscp, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ipType, Child<::facebook::fboss::cfg::IpType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::ttl, ChildThriftPath<::facebook::fboss::state::AclTtl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dstMac, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::l4SrcPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l4DstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lookupClassL2, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::lookupClass, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::lookupClassNeighbor, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::lookupClassRoute, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::packetLookupResult, Child<::facebook::fboss::cfg::PacketLookupResultType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::etherType, Child<::facebook::fboss::cfg::EtherType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::actionType, Child<::facebook::fboss::cfg::AclActionType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::aclAction, ChildThriftPath<::facebook::fboss::state::MatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::vlanID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::enabled, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::facebook::fboss::cfg::IpFragMatch, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::facebook::fboss::cfg::IpType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, ChildThriftPath<::facebook::fboss::state::AclTtl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::facebook::fboss::cfg::PacketLookupResultType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::facebook::fboss::cfg::EtherType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, Child<::facebook::fboss::cfg::AclActionType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, ChildThriftPath<::facebook::fboss::state::MatchAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::AclEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(priority);
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(srcIp);
    STRUCT_CHILD_GETTERS(dstIp);
    STRUCT_CHILD_GETTERS(proto);
    STRUCT_CHILD_GETTERS(tcpFlagsBitMap);
    STRUCT_CHILD_GETTERS(srcPort);
    STRUCT_CHILD_GETTERS(dstPort);
    STRUCT_CHILD_GETTERS(ipFrag);
    STRUCT_CHILD_GETTERS(icmpType);
    STRUCT_CHILD_GETTERS(icmpCode);
    STRUCT_CHILD_GETTERS(dscp);
    STRUCT_CHILD_GETTERS(ipType);
    STRUCT_CHILD_GETTERS(ttl);
    STRUCT_CHILD_GETTERS(dstMac);
    STRUCT_CHILD_GETTERS(l4SrcPort);
    STRUCT_CHILD_GETTERS(l4DstPort);
    STRUCT_CHILD_GETTERS(lookupClassL2);
    STRUCT_CHILD_GETTERS(lookupClass);
    STRUCT_CHILD_GETTERS(lookupClassNeighbor);
    STRUCT_CHILD_GETTERS(lookupClassRoute);
    STRUCT_CHILD_GETTERS(packetLookupResult);
    STRUCT_CHILD_GETTERS(etherType);
    STRUCT_CHILD_GETTERS(actionType);
    STRUCT_CHILD_GETTERS(aclAction);
    STRUCT_CHILD_GETTERS(vlanID);
    STRUCT_CHILD_GETTERS(enabled);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::QosMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::QosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::QosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::dscpMaps, ChildThriftPath<::std::vector<::facebook::fboss::cfg::DscpQosMap>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::expMaps, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExpQosMap>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::trafficClassToQueueId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::pfcPriorityToQueueId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::trafficClassToPgId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::pfcPriorityToPgId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::DscpQosMap>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::ExpQosMap>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::QosMap,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(dscpMaps);
    STRUCT_CHILD_GETTERS(expMaps);
    STRUCT_CHILD_GETTERS(trafficClassToQueueId);
    STRUCT_CHILD_GETTERS(pfcPriorityToQueueId);
    STRUCT_CHILD_GETTERS(trafficClassToPgId);
    STRUCT_CHILD_GETTERS(pfcPriorityToPgId);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::SystemPortThrift, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::SystemPortThrift,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::SystemPortThrift,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::ctrl_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::portId, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::switchId, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::portName, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::coreIndex, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::corePortIndex, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::speedMbps, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::numVoqs, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::enabled, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::qosPolicy, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::queues, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::SystemPortThrift,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(portId);
    STRUCT_CHILD_GETTERS(switchId);
    STRUCT_CHILD_GETTERS(portName);
    STRUCT_CHILD_GETTERS(coreIndex);
    STRUCT_CHILD_GETTERS(corePortIndex);
    STRUCT_CHILD_GETTERS(speedMbps);
    STRUCT_CHILD_GETTERS(numVoqs);
    STRUCT_CHILD_GETTERS(enabled);
    STRUCT_CHILD_GETTERS(qosPolicy);
    STRUCT_CHILD_GETTERS(queues);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::AclTableGroupFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::cfg::AclStage, ::facebook::fboss::state::AclTableGroupFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::enumeration, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::AclStage);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::QosPolicyFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::MirrorTunnel, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::MirrorTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::MirrorTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::srcIp, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dstIp, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::srcMac, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dstMac, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::udpSrcPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::udpDstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ttl, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::network::thrift::BinaryAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::MirrorTunnel,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(srcIp);
    STRUCT_CHILD_GETTERS(dstIp);
    STRUCT_CHILD_GETTERS(srcMac);
    STRUCT_CHILD_GETTERS(dstMac);
    STRUCT_CHILD_GETTERS(udpSrcPort);
    STRUCT_CHILD_GETTERS(udpDstPort);
    STRUCT_CHILD_GETTERS(ttl);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::UdfGroup, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::UdfGroup,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::UdfGroup,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::header, Child<::facebook::fboss::cfg::UdfBaseHeaderType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::startOffsetInBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::fieldSizeInBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::udfPacketMatcherIds, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::facebook::fboss::cfg::UdfBaseHeaderType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::vector<::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::UdfGroup,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(header);
    STRUCT_CHILD_GETTERS(startOffsetInBytes);
    STRUCT_CHILD_GETTERS(fieldSizeInBytes);
    STRUCT_CHILD_GETTERS(udfPacketMatcherIds);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MKASci,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MKASci,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::macAddress, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::port, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::mka::MKASci,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(macAddress);
    STRUCT_CHILD_GETTERS(port);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::InterfaceFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::InterfaceFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::InterfaceFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::interfaceId, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::routerId, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::vlanId, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::mac, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::addresses, ChildThriftPath<::std::map<::std::string, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ndpConfig, ChildThriftPath<::facebook::fboss::cfg::NdpConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::mtu, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::isVirtual, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::isStateSyncDisabled, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::type, Child<::facebook::fboss::cfg::InterfaceType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::arpTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ndpTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::arpResponseTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ndpResponseTable, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dhcpV4Relay, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dhcpV6Relay, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dhcpRelayOverridesV4, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dhcpRelayOverridesV6, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::std::string, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::cfg::NdpConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::facebook::fboss::cfg::InterfaceType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::NeighborResponseEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, ChildThriftPath<::std::map<::std::string, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::InterfaceFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(interfaceId);
    STRUCT_CHILD_GETTERS(routerId);
    STRUCT_CHILD_GETTERS(vlanId);
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(mac);
    STRUCT_CHILD_GETTERS(addresses);
    STRUCT_CHILD_GETTERS(ndpConfig);
    STRUCT_CHILD_GETTERS(mtu);
    STRUCT_CHILD_GETTERS(isVirtual);
    STRUCT_CHILD_GETTERS(isStateSyncDisabled);
    STRUCT_CHILD_GETTERS(type);
    STRUCT_CHILD_GETTERS(arpTable);
    STRUCT_CHILD_GETTERS(ndpTable);
    STRUCT_CHILD_GETTERS(arpResponseTable);
    STRUCT_CHILD_GETTERS(ndpResponseTable);
    STRUCT_CHILD_GETTERS(dhcpV4Relay);
    STRUCT_CHILD_GETTERS(dhcpV6Relay);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV4);
    STRUCT_CHILD_GETTERS(dhcpRelayOverridesV6);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::SocketAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::SocketAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::SocketAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::host, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::port, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::SocketAddress,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(host);
    STRUCT_CHILD_GETTERS(port);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::phy::PinConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::phy::PinConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::phy::PinConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::phy::PinConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::phy::PinConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::phy::PinConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::AclEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::AclEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::AclEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::srcIp, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dstIp, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::srcL4PortRange_DEPRECATED, ChildThriftPath<::facebook::fboss::cfg::L4PortRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::dstL4PortRange_DEPRECATED, ChildThriftPath<::facebook::fboss::cfg::L4PortRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::proto, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::tcpFlagsBitMap, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::srcPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dstPort, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::pktLenRange_DEPRECATED, ChildThriftPath<::facebook::fboss::cfg::PktLenRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ipFrag, Child<::facebook::fboss::cfg::IpFragMatch, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::icmpType, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::icmpCode, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dscp, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::actionType, Child<::facebook::fboss::cfg::AclActionType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::dstMac, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::ttl, ChildThriftPath<::facebook::fboss::cfg::Ttl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::ipType, Child<::facebook::fboss::cfg::IpType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::l4SrcPort, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l4DstPort, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lookupClass_DEPRECATED, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::lookupClassL2, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::lookupClassNeighbor, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::lookupClassRoute, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::packetLookupResult, Child<::facebook::fboss::cfg::PacketLookupResultType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::etherType, Child<::facebook::fboss::cfg::EtherType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::vlanID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::cfg::L4PortRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::cfg::L4PortRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::facebook::fboss::cfg::PktLenRange, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::facebook::fboss::cfg::IpFragMatch, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int8_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::facebook::fboss::cfg::AclActionType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, ChildThriftPath<::facebook::fboss::cfg::Ttl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::facebook::fboss::cfg::IpType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, Child<::facebook::fboss::cfg::PacketLookupResultType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, Child<::facebook::fboss::cfg::EtherType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::AclEntry,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(srcIp);
    STRUCT_CHILD_GETTERS(dstIp);
    STRUCT_CHILD_GETTERS(srcL4PortRange_DEPRECATED);
    STRUCT_CHILD_GETTERS(dstL4PortRange_DEPRECATED);
    STRUCT_CHILD_GETTERS(proto);
    STRUCT_CHILD_GETTERS(tcpFlagsBitMap);
    STRUCT_CHILD_GETTERS(srcPort);
    STRUCT_CHILD_GETTERS(dstPort);
    STRUCT_CHILD_GETTERS(pktLenRange_DEPRECATED);
    STRUCT_CHILD_GETTERS(ipFrag);
    STRUCT_CHILD_GETTERS(icmpType);
    STRUCT_CHILD_GETTERS(icmpCode);
    STRUCT_CHILD_GETTERS(dscp);
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(actionType);
    STRUCT_CHILD_GETTERS(dstMac);
    STRUCT_CHILD_GETTERS(ttl);
    STRUCT_CHILD_GETTERS(ipType);
    STRUCT_CHILD_GETTERS(l4SrcPort);
    STRUCT_CHILD_GETTERS(l4DstPort);
    STRUCT_CHILD_GETTERS(lookupClass_DEPRECATED);
    STRUCT_CHILD_GETTERS(lookupClassL2);
    STRUCT_CHILD_GETTERS(lookupClassNeighbor);
    STRUCT_CHILD_GETTERS(lookupClassRoute);
    STRUCT_CHILD_GETTERS(packetLookupResult);
    STRUCT_CHILD_GETTERS(etherType);
    STRUCT_CHILD_GETTERS(vlanID);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticIp2MplsRoute>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::StaticIp2MplsRoute>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::StaticIp2MplsRoute>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::StaticIp2MplsRoute, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticIp2MplsRoute>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::StaticIp2MplsRoute>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::int16_t, ::facebook::fboss::state::PortFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::PortPgFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::PortPgFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::PortPgFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::id, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::minLimitBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::headroomLimitBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::resumeOffsetBytes, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::bufferPoolName, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::scalingFactor, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::bufferPoolConfig, ChildThriftPath<::facebook::fboss::state::BufferPoolFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::facebook::fboss::state::BufferPoolFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::PortPgFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(minLimitBytes);
    STRUCT_CHILD_GETTERS(headroomLimitBytes);
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(resumeOffsetBytes);
    STRUCT_CHILD_GETTERS(bufferPoolName);
    STRUCT_CHILD_GETTERS(scalingFactor);
    STRUCT_CHILD_GETTERS(bufferPoolConfig);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteWithNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::cfg::StaticRouteWithNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::cfg::StaticRouteWithNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::StaticRouteWithNextHops, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::cfg::StaticRouteWithNextHops>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::cfg::StaticRouteWithNextHops>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::RouteNextHopsMulti, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::RouteNextHopsMulti,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::RouteNextHopsMulti,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::lowestAdminDistanceClientId, Child<::facebook::fboss::ClientID, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::client2NextHopEntry, ChildThriftPath<::std::map<::facebook::fboss::ClientID, ::facebook::fboss::state::RouteNextHopEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::ClientID, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::facebook::fboss::ClientID, ::facebook::fboss::state::RouteNextHopEntry>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::RouteNextHopsMulti,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(lowestAdminDistanceClientId);
    STRUCT_CHILD_GETTERS(client2NextHopEntry);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::Subport, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::Subport,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::Subport,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::id, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::priority, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lacpPortRate, Child<::facebook::fboss::cfg::LacpPortRate, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::lacpPortActivity, Child<::facebook::fboss::cfg::LacpPortActivity, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::holdTimerMultiplier, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::facebook::fboss::cfg::LacpPortRate, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::facebook::fboss::cfg::LacpPortActivity, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::Subport,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(priority);
    STRUCT_CHILD_GETTERS(lacpPortRate);
    STRUCT_CHILD_GETTERS(lacpPortActivity);
    STRUCT_CHILD_GETTERS(holdTimerMultiplier);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::RxSak, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::RxSak,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::RxSak,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::sakKey, ChildThriftPath<::facebook::fboss::state::MKASakKey, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::sak, ChildThriftPath<::facebook::fboss::mka::MKASak, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::state::MKASakKey, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::mka::MKASak, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::RxSak,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(sakKey);
    STRUCT_CHILD_GETTERS(sak);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::QosPolicyFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::QosPolicyFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::QosPolicyFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::dscpMap, ChildThriftPath<::facebook::fboss::state::TrafficClassToQosAttributeMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::expMap, ChildThriftPath<::facebook::fboss::state::TrafficClassToQosAttributeMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::trafficClassToQueueId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::pfcPriorityToQueueId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::trafficClassToPgId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::pfcPriorityToPgId, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::state::TrafficClassToQosAttributeMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::state::TrafficClassToQosAttributeMap, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::map<::std::int16_t, ::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::QosPolicyFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(dscpMap);
    STRUCT_CHILD_GETTERS(expMap);
    STRUCT_CHILD_GETTERS(trafficClassToQueueId);
    STRUCT_CHILD_GETTERS(pfcPriorityToQueueId);
    STRUCT_CHILD_GETTERS(trafficClassToPgId);
    STRUCT_CHILD_GETTERS(pfcPriorityToPgId);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::cfg::PortFlowletConfigName, ::facebook::fboss::cfg::PortFlowletConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::cfg::PortFlowletConfigName, ::facebook::fboss::cfg::PortFlowletConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::cfg::PortFlowletConfigName, ::facebook::fboss::cfg::PortFlowletConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::cfg::PortFlowletConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::cfg::PortFlowletConfigName, ::facebook::fboss::cfg::PortFlowletConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::cfg::PortFlowletConfigName, ::facebook::fboss::cfg::PortFlowletConfig>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::cfg::PortFlowletConfigName);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MKASak, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MKASak,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MKASak,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::sci, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::l2Port, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::assocNum, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::keyHex, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::keyIdHex, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::confidentOffset, Child<::facebook::fboss::mka::MKAConfidentialityOffset, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::primary, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dropUnencrypted, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::facebook::fboss::mka::MKAConfidentialityOffset, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::mka::MKASak,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(sci);
    STRUCT_CHILD_GETTERS(l2Port);
    STRUCT_CHILD_GETTERS(assocNum);
    STRUCT_CHILD_GETTERS(keyHex);
    STRUCT_CHILD_GETTERS(keyIdHex);
    STRUCT_CHILD_GETTERS(confidentOffset);
    STRUCT_CHILD_GETTERS(primary);
    STRUCT_CHILD_GETTERS(dropUnencrypted);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclTableFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::AclTableFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::AclTableFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::AclTableFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::AclTableFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::state::AclTableFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::PortFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::PortFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::PortFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::portId, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::portName, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::portDescription, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::portState, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::portOperState, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ingressVlan, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::portSpeed, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::rxPause, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::txPause, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::vlanMemberShips, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::VlanInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::sFlowIngressRate, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::sFlowEgressRate, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::queues, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::portLoopbackMode, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::ingressMirror, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::egressMirror, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::qosPolicy, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::sampleDest, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::portProfileID, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::lookupClassesToDistrubuteTrafficOn, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclLookupClass>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::maxFrameSize, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::pfc, ChildThriftPath<::facebook::fboss::cfg::PortPfc, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::pgConfigs, ChildThriftPath<::std::vector<::facebook::fboss::state::PortPgFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::profileConfig, ChildThriftPath<::facebook::fboss::phy::ProfileSideConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::pinConfigs, ChildThriftPath<::std::vector<::facebook::fboss::phy::PinConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::lineProfileConfig, ChildThriftPath<::facebook::fboss::phy::ProfileSideConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::linePinConfigs, ChildThriftPath<::std::vector<::facebook::fboss::phy::PinConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::portType, Child<::facebook::fboss::cfg::PortType, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::iPhyLinkFaultStatus, ChildThriftPath<::facebook::fboss::phy::LinkFaultStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::asicPrbs, ChildThriftPath<::facebook::fboss::phy::PortPrbsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::gbSystemPrbs, ChildThriftPath<::facebook::fboss::phy::PortPrbsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::gbLinePrbs, ChildThriftPath<::facebook::fboss::phy::PortPrbsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::pfcPriorities, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::expectedLLDPValues, ChildThriftPath<::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::rxSecureAssociationKeys, ChildThriftPath<::std::vector<::facebook::fboss::state::RxSak>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::txSecureAssociationKey, ChildThriftPath<::facebook::fboss::mka::MKASak, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::macsecDesired, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dropUnencrypted, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::interfaceIDs, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::expectedNeighborReachability, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::drainState, Child<::facebook::fboss::cfg::PortDrainState, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::flowletConfigName, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::flowletConfig, ChildThriftPath<::facebook::fboss::state::PortFlowletFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::portLedExternalState, Child<::facebook::fboss::PortLedExternalState, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::VlanInfo>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, ChildThriftPath<::std::vector<::facebook::fboss::PortQueueFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::AclLookupClass>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, ChildThriftPath<::facebook::fboss::cfg::PortPfc, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, ChildThriftPath<::std::vector<::facebook::fboss::state::PortPgFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, ChildThriftPath<::facebook::fboss::phy::ProfileSideConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, ChildThriftPath<::std::vector<::facebook::fboss::phy::PinConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, ChildThriftPath<::facebook::fboss::phy::ProfileSideConfig, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, ChildThriftPath<::std::vector<::facebook::fboss::phy::PinConfig>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, Child<::facebook::fboss::cfg::PortType, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, ChildThriftPath<::facebook::fboss::phy::LinkFaultStatus, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 32>, ChildThriftPath<::facebook::fboss::phy::PortPrbsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 33>, ChildThriftPath<::facebook::fboss::phy::PortPrbsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 34>, ChildThriftPath<::facebook::fboss::phy::PortPrbsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 35>, ChildThriftPath<::std::vector<::std::int16_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 36>, ChildThriftPath<::std::map<::facebook::fboss::cfg::LLDPTag, ::std::string>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 37>, ChildThriftPath<::std::vector<::facebook::fboss::state::RxSak>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 38>, ChildThriftPath<::facebook::fboss::mka::MKASak, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 39>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 40>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 41>, ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 42>, ChildThriftPath<::std::vector<::facebook::fboss::cfg::PortNeighbor>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 43>, Child<::facebook::fboss::cfg::PortDrainState, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 44>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 45>, ChildThriftPath<::facebook::fboss::state::PortFlowletFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 46>, Child<::facebook::fboss::PortLedExternalState, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::PortFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(portId);
    STRUCT_CHILD_GETTERS(portName);
    STRUCT_CHILD_GETTERS(portDescription);
    STRUCT_CHILD_GETTERS(portState);
    STRUCT_CHILD_GETTERS(portOperState);
    STRUCT_CHILD_GETTERS(ingressVlan);
    STRUCT_CHILD_GETTERS(portSpeed);
    STRUCT_CHILD_GETTERS(rxPause);
    STRUCT_CHILD_GETTERS(txPause);
    STRUCT_CHILD_GETTERS(vlanMemberShips);
    STRUCT_CHILD_GETTERS(sFlowIngressRate);
    STRUCT_CHILD_GETTERS(sFlowEgressRate);
    STRUCT_CHILD_GETTERS(queues);
    STRUCT_CHILD_GETTERS(portLoopbackMode);
    STRUCT_CHILD_GETTERS(ingressMirror);
    STRUCT_CHILD_GETTERS(egressMirror);
    STRUCT_CHILD_GETTERS(qosPolicy);
    STRUCT_CHILD_GETTERS(sampleDest);
    STRUCT_CHILD_GETTERS(portProfileID);
    STRUCT_CHILD_GETTERS(lookupClassesToDistrubuteTrafficOn);
    STRUCT_CHILD_GETTERS(maxFrameSize);
    STRUCT_CHILD_GETTERS(pfc);
    STRUCT_CHILD_GETTERS(pgConfigs);
    STRUCT_CHILD_GETTERS(profileConfig);
    STRUCT_CHILD_GETTERS(pinConfigs);
    STRUCT_CHILD_GETTERS(lineProfileConfig);
    STRUCT_CHILD_GETTERS(linePinConfigs);
    STRUCT_CHILD_GETTERS(portType);
    STRUCT_CHILD_GETTERS(iPhyLinkFaultStatus);
    STRUCT_CHILD_GETTERS(asicPrbs);
    STRUCT_CHILD_GETTERS(gbSystemPrbs);
    STRUCT_CHILD_GETTERS(gbLinePrbs);
    STRUCT_CHILD_GETTERS(pfcPriorities);
    STRUCT_CHILD_GETTERS(expectedLLDPValues);
    STRUCT_CHILD_GETTERS(rxSecureAssociationKeys);
    STRUCT_CHILD_GETTERS(txSecureAssociationKey);
    STRUCT_CHILD_GETTERS(macsecDesired);
    STRUCT_CHILD_GETTERS(dropUnencrypted);
    STRUCT_CHILD_GETTERS(interfaceIDs);
    STRUCT_CHILD_GETTERS(expectedNeighborReachability);
    STRUCT_CHILD_GETTERS(drainState);
    STRUCT_CHILD_GETTERS(flowletConfigName);
    STRUCT_CHILD_GETTERS(flowletConfig);
    STRUCT_CHILD_GETTERS(portLedExternalState);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::SflowCollectorFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::SflowCollectorFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::SflowCollectorFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::id, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::address, ChildThriftPath<::facebook::fboss::state::SocketAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::state::SocketAddress, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::SflowCollectorFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(id);
    STRUCT_CHILD_GETTERS(address);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::RedirectToNextHopAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::RedirectToNextHopAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::action, ChildThriftPath<::facebook::fboss::cfg::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::resolvedNexthops, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::cfg::RedirectToNextHopAction, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::NextHopThrift>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::RedirectToNextHopAction,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(action);
    STRUCT_CHILD_GETTERS(resolvedNexthops);
};

template<typename Parent>
class ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>;
  using Child = ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::facebook::fboss::state::SwitchIdList, ::std::map<::std::string, ::facebook::fboss::state::PortFlowletFields>>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::facebook::fboss::state::SwitchIdList);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PortPrbsState, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PortPrbsState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PortPrbsState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::enabled, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::polynominal, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::PortPrbsState,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(enabled);
    STRUCT_CHILD_GETTERS(polynominal);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::LabelForwardingEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::LabelForwardingEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::LabelForwardingEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::label, ChildThriftPath<::facebook::fboss::state::Label, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::nexthopsmulti, ChildThriftPath<::facebook::fboss::state::RouteNextHopsMulti, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::fwd, ChildThriftPath<::facebook::fboss::state::RouteNextHopEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<strings::flags, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::classID, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::state::Label, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::state::RouteNextHopsMulti, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::state::RouteNextHopEntry, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::facebook::fboss::cfg::AclLookupClass, ::apache::thrift::type_class::enumeration>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::LabelForwardingEntryFields,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(label);
    STRUCT_CHILD_GETTERS(nexthopsmulti);
    STRUCT_CHILD_GETTERS(fwd);
    STRUCT_CHILD_GETTERS(flags);
    STRUCT_CHILD_GETTERS(classID);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::cfg::MirrorEgressPort, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::cfg::MirrorEgressPort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::cfg::MirrorEgressPort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent>;
  using strings = ::facebook::fboss::cfg::switch_config_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::logicalID, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::cfg::MirrorEgressPort,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::variant,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(logicalID);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::VlanInfo, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::VlanInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::VlanInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::tagged, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::VlanInfo,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(tagged);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::state::AclTtl, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::facebook::fboss::state::AclTtl,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::state::AclTtl,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::state::switch_state_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStateRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::value, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::mask, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::state::AclTtl,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(value);
    STRUCT_CHILD_GETTERS(mask);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::state::TeFlowEntryFields, ::facebook::fboss::fsdb::FsdbOperStateRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>, ::facebook::fboss::fsdb::FsdbOperStateRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::state::TeFlowEntryFields>,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};



template<>
class RootThriftPath<::facebook::fboss::fsdb::FsdbOperStateRoot> :
  public ChildThriftPath<
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   ::facebook::fboss::fsdb::FsdbOperStateRoot,
   folly::Unit> {};
template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::platform::sensor_service::SensorData>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::platform::sensor_service::SensorData>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::platform::sensor_service::SensorData>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::platform::sensor_service::SensorData, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::platform::sensor_service::SensorData>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::platform::sensor_service::SensorData>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::stats::SensorServiceStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::stats::SensorServiceStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::stats::SensorServiceStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::stats::sensor_service_stats_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::sensorData, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::platform::sensor_service::SensorData>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::platform::sensor_service::SensorData>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::stats::SensorServiceStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(sensorData);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::Flags, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::Flags,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::Flags,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::high, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::low, Child<bool, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<bool, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::Flags,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(high);
    STRUCT_CHILD_GETTERS(low);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::VdmDiagsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::VdmDiagsStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::VdmDiagsStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::preFecBerMediaMin, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::preFecBerMediaMax, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::preFecBerMediaAvg, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::preFecBerMediaCur, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::eSnrMediaChannel, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::preFecBerHostMin, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::preFecBerHostMax, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::preFecBerHostAvg, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::preFecBerHostCur, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::statsCollectionTme, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::errFrameMediaMin, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::errFrameMediaMax, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::errFrameMediaAvg, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::errFrameMediaCur, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::errFrameHostMin, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::errFrameHostMax, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::errFrameHostAvg, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::errFrameHostCur, Child<double, ::apache::thrift::type_class::floating_point>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<double, ::apache::thrift::type_class::floating_point>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::VdmDiagsStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(preFecBerMediaMin);
    STRUCT_CHILD_GETTERS(preFecBerMediaMax);
    STRUCT_CHILD_GETTERS(preFecBerMediaAvg);
    STRUCT_CHILD_GETTERS(preFecBerMediaCur);
    STRUCT_CHILD_GETTERS(eSnrMediaChannel);
    STRUCT_CHILD_GETTERS(preFecBerHostMin);
    STRUCT_CHILD_GETTERS(preFecBerHostMax);
    STRUCT_CHILD_GETTERS(preFecBerHostAvg);
    STRUCT_CHILD_GETTERS(preFecBerHostCur);
    STRUCT_CHILD_GETTERS(statsCollectionTme);
    STRUCT_CHILD_GETTERS(errFrameMediaMin);
    STRUCT_CHILD_GETTERS(errFrameMediaMax);
    STRUCT_CHILD_GETTERS(errFrameMediaAvg);
    STRUCT_CHILD_GETTERS(errFrameMediaCur);
    STRUCT_CHILD_GETTERS(errFrameHostMin);
    STRUCT_CHILD_GETTERS(errFrameHostMax);
    STRUCT_CHILD_GETTERS(errFrameHostAvg);
    STRUCT_CHILD_GETTERS(errFrameHostCur);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::TcvrStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::TcvrStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::TcvrStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::sensor, ChildThriftPath<::facebook::fboss::GlobalSensors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::channels, ChildThriftPath<::std::vector<::facebook::fboss::Channel>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::stats, ChildThriftPath<::facebook::fboss::TransceiverStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::remediationCounter, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::vdmDiagsStats, ChildThriftPath<::facebook::fboss::VdmDiagsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::vdmDiagsStatsForOds, ChildThriftPath<::facebook::fboss::VdmDiagsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::portNameToHostLanes, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::portNameToMediaLanes, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::timeCollected, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::GlobalSensors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::Channel>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::TransceiverStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::VdmDiagsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::VdmDiagsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::TcvrStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(sensor);
    STRUCT_CHILD_GETTERS(channels);
    STRUCT_CHILD_GETTERS(stats);
    STRUCT_CHILD_GETTERS(remediationCounter);
    STRUCT_CHILD_GETTERS(vdmDiagsStats);
    STRUCT_CHILD_GETTERS(vdmDiagsStatsForOds);
    STRUCT_CHILD_GETTERS(portNameToHostLanes);
    STRUCT_CHILD_GETTERS(portNameToMediaLanes);
    STRUCT_CHILD_GETTERS(timeCollected);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::Channel, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::Channel,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::Channel,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::channel, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::sensors, ChildThriftPath<::facebook::fboss::ChannelSensors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::ChannelSensors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::Channel,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(channel);
    STRUCT_CHILD_GETTERS(sensors);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, double>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, double>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>,
   Parent>;
  using Child = Path<double, ::facebook::fboss::fsdb::FsdbOperStatsRoot, ::apache::thrift::type_class::floating_point, Self>;

  explicit ChildThriftPath<::std::map<::std::int32_t, double>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int32_t, double>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::TcvrStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int32_t, ::facebook::fboss::TcvrStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int32_t, ::facebook::fboss::TcvrStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::TcvrStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::TcvrStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int32_t, ::facebook::fboss::TcvrStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PhySideStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PhySideStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PhySideStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::side, Child<::facebook::fboss::phy::Side, ::apache::thrift::type_class::enumeration>>,
   std::pair<strings::pcs, ChildThriftPath<::facebook::fboss::phy::PcsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::pmd, ChildThriftPath<::facebook::fboss::phy::PmdStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::facebook::fboss::phy::Side, ::apache::thrift::type_class::enumeration>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::phy::PcsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::phy::PmdStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::PhySideStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(side);
    STRUCT_CHILD_GETTERS(pcs);
    STRUCT_CHILD_GETTERS(pmd);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::LaneStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::LaneStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::LaneStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::phy::LaneStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::LaneStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int16_t, ::facebook::fboss::phy::LaneStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::GlobalSensors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::GlobalSensors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::GlobalSensors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::temp, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::vcc, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::GlobalSensors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(temp);
    STRUCT_CHILD_GETTERS(vcc);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::fsdb::FsdbOperStatsRoot, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::fsdb::fsdb_model_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::agent, ChildThriftPath<::facebook::fboss::AgentStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::qsfp_service, ChildThriftPath<::facebook::fboss::stats::QsfpStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::sensor_service, ChildThriftPath<::facebook::fboss::stats::SensorServiceStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::AgentStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::stats::QsfpStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::stats::SensorServiceStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(agent);
    STRUCT_CHILD_GETTERS(qsfp_service);
    STRUCT_CHILD_GETTERS(sensor_service);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PhyStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PhyStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PhyStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::system, ChildThriftPath<::facebook::fboss::phy::PhySideStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::line, ChildThriftPath<::facebook::fboss::phy::PhySideStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::linkFlapCount, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::timeCollected, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::phy::PhySideStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::phy::PhySideStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::PhyStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(system);
    STRUCT_CHILD_GETTERS(line);
    STRUCT_CHILD_GETTERS(linkFlapCount);
    STRUCT_CHILD_GETTERS(timeCollected);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::platform::sensor_service::SensorData, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::platform::sensor_service::SensorData,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::platform::sensor_service::SensorData,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::platform::sensor_service::sensor_service_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::name, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::value, Child<float, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::timeStamp, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<float, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::platform::sensor_service::SensorData,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(name);
    STRUCT_CHILD_GETTERS(value);
    STRUCT_CHILD_GETTERS(timeStamp);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PmdStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PmdStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PmdStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::lanes, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::LaneStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::int16_t, ::facebook::fboss::phy::LaneStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::PmdStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(lanes);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::EyeInfo, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::EyeInfo,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::EyeInfo,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::width, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::height, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::EyeInfo,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(width);
    STRUCT_CHILD_GETTERS(height);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::HwPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::HwPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::HwPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::RsFecInfo, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::RsFecInfo,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::RsFecInfo,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::correctedCodewords, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::uncorrectedCodewords, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::correctedBits, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::preFECBer, Child<double, ::apache::thrift::type_class::floating_point>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<double, ::apache::thrift::type_class::floating_point>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::RsFecInfo,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(correctedCodewords);
    STRUCT_CHILD_GETTERS(uncorrectedCodewords);
    STRUCT_CHILD_GETTERS(correctedBits);
    STRUCT_CHILD_GETTERS(preFECBer);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwTeFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::HwTeFlowStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::HwTeFlowStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwTeFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwTeFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::HwTeFlowStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::Sensor,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::Sensor,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::value, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::flags, ChildThriftPath<::facebook::fboss::FlagLevels, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::FlagLevels, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::Sensor,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(value);
    STRUCT_CHILD_GETTERS(flags);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::MacsecSciFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::MacsecSciFlowStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::MacsecSciFlowStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::MacsecSciFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::MacsecSciFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::MacsecSciFlowStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::inBytes_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inUnicastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inMulticastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inBroadcastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inPause_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inIpv4HdrErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inIpv6HdrErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inDstNullDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inDiscardsRaw_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outBytes_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outUnicastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outMulticastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outBroadcastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outPause_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outCongestionDiscardPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::wredDroppedPackets_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::queueOutDiscardBytes_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::queueOutBytes_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::outEcnCounter_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::queueOutPackets_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::queueOutDiscardPackets_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::queueWatermarkBytes_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::fecCorrectableErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::fecUncorrectableErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inPfcCtrl_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outPfcCtrl_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inPfc_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::inPfcXon_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::outPfc_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::queueWredDroppedPackets_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::queueEcnMarkedPackets_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::timestamp_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::portName_, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::macsecStats, ChildThriftPath<::facebook::fboss::MacsecStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::inLabelMissDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::queueWatermarkLevel_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::inCongestionDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 32>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 33>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 34>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 35>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 50>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 51>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 52>, ChildThriftPath<::facebook::fboss::MacsecStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 53>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 54>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 55>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::HwPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(inBytes_);
    STRUCT_CHILD_GETTERS(inUnicastPkts_);
    STRUCT_CHILD_GETTERS(inMulticastPkts_);
    STRUCT_CHILD_GETTERS(inBroadcastPkts_);
    STRUCT_CHILD_GETTERS(inDiscards_);
    STRUCT_CHILD_GETTERS(inErrors_);
    STRUCT_CHILD_GETTERS(inPause_);
    STRUCT_CHILD_GETTERS(inIpv4HdrErrors_);
    STRUCT_CHILD_GETTERS(inIpv6HdrErrors_);
    STRUCT_CHILD_GETTERS(inDstNullDiscards_);
    STRUCT_CHILD_GETTERS(inDiscardsRaw_);
    STRUCT_CHILD_GETTERS(outBytes_);
    STRUCT_CHILD_GETTERS(outUnicastPkts_);
    STRUCT_CHILD_GETTERS(outMulticastPkts_);
    STRUCT_CHILD_GETTERS(outBroadcastPkts_);
    STRUCT_CHILD_GETTERS(outDiscards_);
    STRUCT_CHILD_GETTERS(outErrors_);
    STRUCT_CHILD_GETTERS(outPause_);
    STRUCT_CHILD_GETTERS(outCongestionDiscardPkts_);
    STRUCT_CHILD_GETTERS(wredDroppedPackets_);
    STRUCT_CHILD_GETTERS(queueOutDiscardBytes_);
    STRUCT_CHILD_GETTERS(queueOutBytes_);
    STRUCT_CHILD_GETTERS(outEcnCounter_);
    STRUCT_CHILD_GETTERS(queueOutPackets_);
    STRUCT_CHILD_GETTERS(queueOutDiscardPackets_);
    STRUCT_CHILD_GETTERS(queueWatermarkBytes_);
    STRUCT_CHILD_GETTERS(fecCorrectableErrors);
    STRUCT_CHILD_GETTERS(fecUncorrectableErrors);
    STRUCT_CHILD_GETTERS(inPfcCtrl_);
    STRUCT_CHILD_GETTERS(outPfcCtrl_);
    STRUCT_CHILD_GETTERS(inPfc_);
    STRUCT_CHILD_GETTERS(inPfcXon_);
    STRUCT_CHILD_GETTERS(outPfc_);
    STRUCT_CHILD_GETTERS(queueWredDroppedPackets_);
    STRUCT_CHILD_GETTERS(queueEcnMarkedPackets_);
    STRUCT_CHILD_GETTERS(timestamp_);
    STRUCT_CHILD_GETTERS(portName_);
    STRUCT_CHILD_GETTERS(macsecStats);
    STRUCT_CHILD_GETTERS(inLabelMissDiscards_);
    STRUCT_CHILD_GETTERS(queueWatermarkLevel_);
    STRUCT_CHILD_GETTERS(inCongestionDiscards_);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwBufferPoolStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwBufferPoolStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwBufferPoolStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::deviceWatermarkBytes, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::HwBufferPoolStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(deviceWatermarkBytes);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::vector<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   Parent>;
  using Child = Path<::std::int32_t, ::facebook::fboss::fsdb::FsdbOperStatsRoot, ::apache::thrift::type_class::integral, Self>;

  explicit ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::std::int32_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwTrunkStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::HwTrunkStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::HwTrunkStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwTrunkStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwTrunkStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::HwTrunkStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwSysPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwSysPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwSysPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::queueOutDiscardBytes_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::queueOutBytes_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::queueWatermarkBytes_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::queueWredDroppedPackets_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::queueCreditWatchdogDeletedPackets_, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::timestamp_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::portName_, Child<::std::string, ::apache::thrift::type_class::string>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 100>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 101>, Child<::std::string, ::apache::thrift::type_class::string>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::HwSysPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(queueOutDiscardBytes_);
    STRUCT_CHILD_GETTERS(queueOutBytes_);
    STRUCT_CHILD_GETTERS(queueWatermarkBytes_);
    STRUCT_CHILD_GETTERS(queueWredDroppedPackets_);
    STRUCT_CHILD_GETTERS(queueCreditWatchdogDeletedPackets_);
    STRUCT_CHILD_GETTERS(timestamp_);
    STRUCT_CHILD_GETTERS(portName_);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::FlagLevels, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::FlagLevels,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::FlagLevels,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::alarm, ChildThriftPath<::facebook::fboss::Flags, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::warn, ChildThriftPath<::facebook::fboss::Flags, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::Flags, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::Flags, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::FlagLevels,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(alarm);
    STRUCT_CHILD_GETTERS(warn);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MKASci,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MKASci,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::macAddress, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<strings::port, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::string, ::apache::thrift::type_class::string>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::mka::MKASci,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(macAddress);
    STRUCT_CHILD_GETTERS(port);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::stats::QsfpStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::stats::QsfpStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::stats::QsfpStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::stats::qsfp_stats_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::phyStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::tcvrStats, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::TcvrStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::portStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::int32_t, ::facebook::fboss::TcvrStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::stats::QsfpStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(phyStats);
    STRUCT_CHILD_GETTERS(tcvrStats);
    STRUCT_CHILD_GETTERS(portStats);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::TeFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::TeFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::TeFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::hwTeFlowStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwTeFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::timestamp, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwTeFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::TeFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(hwTeFlowStats);
    STRUCT_CHILD_GETTERS(timestamp);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::MacsecSaIdSaStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::MacsecSaIdSaStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::MacsecSaIdSaStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::MacsecSaIdSaStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::MacsecSaIdSaStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::MacsecSaIdSaStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MKASecureAssociationId, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MKASecureAssociationId,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MKASecureAssociationId,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::sci, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::assocNum, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::mka::MKASecureAssociationId,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(sci);
    STRUCT_CHILD_GETTERS(assocNum);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MacsecPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MacsecPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MacsecPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::preMacsecDropPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::controlPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::dataPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::octetsEncrypted, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inBadOrNoMacsecTagDroppedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inNoSciDroppedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inUnknownSciPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inOverrunDroppedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inDelayedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inLateDroppedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inNotValidDroppedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inInvalidPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inNoSaDroppedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inUnusedSaPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inCurrentXpn, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outTooLongDroppedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outCurrentXpn, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::noMacsecTagPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 45>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::mka::MacsecPortStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(preMacsecDropPkts);
    STRUCT_CHILD_GETTERS(controlPkts);
    STRUCT_CHILD_GETTERS(dataPkts);
    STRUCT_CHILD_GETTERS(octetsEncrypted);
    STRUCT_CHILD_GETTERS(inBadOrNoMacsecTagDroppedPkts);
    STRUCT_CHILD_GETTERS(inNoSciDroppedPkts);
    STRUCT_CHILD_GETTERS(inUnknownSciPkts);
    STRUCT_CHILD_GETTERS(inOverrunDroppedPkts);
    STRUCT_CHILD_GETTERS(inDelayedPkts);
    STRUCT_CHILD_GETTERS(inLateDroppedPkts);
    STRUCT_CHILD_GETTERS(inNotValidDroppedPkts);
    STRUCT_CHILD_GETTERS(inInvalidPkts);
    STRUCT_CHILD_GETTERS(inNoSaDroppedPkts);
    STRUCT_CHILD_GETTERS(inUnusedSaPkts);
    STRUCT_CHILD_GETTERS(inCurrentXpn);
    STRUCT_CHILD_GETTERS(outTooLongDroppedPkts);
    STRUCT_CHILD_GETTERS(outCurrentXpn);
    STRUCT_CHILD_GETTERS(noMacsecTagPkts);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::ChannelSensors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::ChannelSensors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::ChannelSensors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::rxPwr, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::txBias, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::txPwr, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::txSnr, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::rxSnr, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::rxPwrdBm, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::txPwrdBm, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::Sensor, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::ChannelSensors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(rxPwr);
    STRUCT_CHILD_GETTERS(txBias);
    STRUCT_CHILD_GETTERS(txPwr);
    STRUCT_CHILD_GETTERS(txSnr);
    STRUCT_CHILD_GETTERS(rxSnr);
    STRUCT_CHILD_GETTERS(rxPwrdBm);
    STRUCT_CHILD_GETTERS(txPwrdBm);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::LaneStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::LaneStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::LaneStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::lane, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::eyes, ChildThriftPath<::std::vector<::facebook::fboss::phy::EyeInfo>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::snr, Child<float, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::signalDetectChangedCount, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::cdrLockChangedCount, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int16_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::vector<::facebook::fboss::phy::EyeInfo>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<float, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::LaneStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(lane);
    STRUCT_CHILD_GETTERS(eyes);
    STRUCT_CHILD_GETTERS(snr);
    STRUCT_CHILD_GETTERS(signalDetectChangedCount);
    STRUCT_CHILD_GETTERS(cdrLockChangedCount);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MacsecSaStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MacsecSaStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MacsecSaStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::directionIngress, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::octetsEncrypted, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::octetsProtected, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outEncryptedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outProtectedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inUncheckedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inDelayedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inLatePkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inInvalidPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inNotValidPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inNoSaPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inUnusedSaPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inOkPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outCurrentXpn, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inCurrentXpn, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::mka::MacsecSaStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(directionIngress);
    STRUCT_CHILD_GETTERS(octetsEncrypted);
    STRUCT_CHILD_GETTERS(octetsProtected);
    STRUCT_CHILD_GETTERS(outEncryptedPkts);
    STRUCT_CHILD_GETTERS(outProtectedPkts);
    STRUCT_CHILD_GETTERS(inUncheckedPkts);
    STRUCT_CHILD_GETTERS(inDelayedPkts);
    STRUCT_CHILD_GETTERS(inLatePkts);
    STRUCT_CHILD_GETTERS(inInvalidPkts);
    STRUCT_CHILD_GETTERS(inNotValidPkts);
    STRUCT_CHILD_GETTERS(inNoSaPkts);
    STRUCT_CHILD_GETTERS(inUnusedSaPkts);
    STRUCT_CHILD_GETTERS(inOkPkts);
    STRUCT_CHILD_GETTERS(outCurrentXpn);
    STRUCT_CHILD_GETTERS(inCurrentXpn);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::Channel>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::Channel>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::Channel>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::Channel, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::Channel>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::Channel>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MacsecSaIdSaStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::MacsecSaIdSaStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MacsecSaIdSaStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::saId, ChildThriftPath<::facebook::fboss::mka::MKASecureAssociationId, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::saStats, ChildThriftPath<::facebook::fboss::mka::MacsecSaStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::mka::MKASecureAssociationId, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::mka::MacsecSaStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::MacsecSaIdSaStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(saId);
    STRUCT_CHILD_GETTERS(saStats);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::TransceiverStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::TransceiverStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::TransceiverStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::transceiver_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::readDownTime, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::writeDownTime, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<strings::numReadAttempted, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::numReadFailed, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::numWriteAttempted, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::numWriteFailed, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<double, ::apache::thrift::type_class::floating_point>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::TransceiverStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(readDownTime);
    STRUCT_CHILD_GETTERS(writeDownTime);
    STRUCT_CHILD_GETTERS(numReadAttempted);
    STRUCT_CHILD_GETTERS(numReadFailed);
    STRUCT_CHILD_GETTERS(numWriteAttempted);
    STRUCT_CHILD_GETTERS(numWriteFailed);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MacsecStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::MacsecStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MacsecStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::ingressPortStats, ChildThriftPath<::facebook::fboss::mka::MacsecPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::egressPortStats, ChildThriftPath<::facebook::fboss::mka::MacsecPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::ingressFlowStats, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSciFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::egressFlowStats, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSciFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::rxSecureAssociationStats, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSaIdSaStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::txSecureAssociationStats, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSaIdSaStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::ingressAclStats, ChildThriftPath<::facebook::fboss::mka::MacsecAclStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::egressAclStats, ChildThriftPath<::facebook::fboss::mka::MacsecAclStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::mka::MacsecPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::mka::MacsecPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSciFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSciFlowStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSaIdSaStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, ChildThriftPath<::std::vector<::facebook::fboss::MacsecSaIdSaStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::facebook::fboss::mka::MacsecAclStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::facebook::fboss::mka::MacsecAclStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::MacsecStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(ingressPortStats);
    STRUCT_CHILD_GETTERS(egressPortStats);
    STRUCT_CHILD_GETTERS(ingressFlowStats);
    STRUCT_CHILD_GETTERS(egressFlowStats);
    STRUCT_CHILD_GETTERS(rxSecureAssociationStats);
    STRUCT_CHILD_GETTERS(txSecureAssociationStats);
    STRUCT_CHILD_GETTERS(ingressAclStats);
    STRUCT_CHILD_GETTERS(egressAclStats);
};

template<typename Parent>
class ChildThriftPath<folly::F14FastMap<::std::string, ::facebook::fboss::HwPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   folly::F14FastMap<::std::string, ::facebook::fboss::HwPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   folly::F14FastMap<::std::string, ::facebook::fboss::HwPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;

  explicit ChildThriftPath<folly::F14FastMap<::std::string, ::facebook::fboss::HwPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   folly::F14FastMap<::std::string, ::facebook::fboss::HwPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::AgentStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::AgentStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::AgentStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::agent_stats_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::hwPortStats, ChildThriftPath<folly::F14FastMap<::std::string, ::facebook::fboss::HwPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::hwTrunkStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwTrunkStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::hwResourceStats, ChildThriftPath<::facebook::fboss::HwResourceStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::hwAsicErrors, ChildThriftPath<::facebook::fboss::HwAsicErrors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::linkFlaps, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::sysPortStats, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwSysPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::teFlowStats, ChildThriftPath<::facebook::fboss::TeFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::bufferPoolStats, ChildThriftPath<::facebook::fboss::HwBufferPoolStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<folly::F14FastMap<::std::string, ::facebook::fboss::HwPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwTrunkStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, ChildThriftPath<::facebook::fboss::HwResourceStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, ChildThriftPath<::facebook::fboss::HwAsicErrors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwSysPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, ChildThriftPath<::facebook::fboss::TeFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, ChildThriftPath<::facebook::fboss::HwBufferPoolStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::AgentStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(hwPortStats);
    STRUCT_CHILD_GETTERS(hwTrunkStats);
    STRUCT_CHILD_GETTERS(hwResourceStats);
    STRUCT_CHILD_GETTERS(hwAsicErrors);
    STRUCT_CHILD_GETTERS(linkFlaps);
    STRUCT_CHILD_GETTERS(sysPortStats);
    STRUCT_CHILD_GETTERS(teFlowStats);
    STRUCT_CHILD_GETTERS(bufferPoolStats);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwSysPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::HwSysPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::HwSysPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::HwSysPortStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::HwSysPortStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::HwSysPortStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MacsecAclStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MacsecAclStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MacsecAclStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::defaultAclStats, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::controlAclStats, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::flowAclStats, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::mka::MacsecAclStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(defaultAclStats);
    STRUCT_CHILD_GETTERS(controlAclStats);
    STRUCT_CHILD_GETTERS(flowAclStats);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwAsicErrors, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwAsicErrors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwAsicErrors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::parityErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::correctedParityErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::uncorrectedParityErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::asicErrors, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::HwAsicErrors,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(parityErrors);
    STRUCT_CHILD_GETTERS(correctedParityErrors);
    STRUCT_CHILD_GETTERS(uncorrectedParityErrors);
    STRUCT_CHILD_GETTERS(asicErrors);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwTeFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwTeFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwTeFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::bytes, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::HwTeFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(bytes);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::mka::MacsecFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::mka::MacsecFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::mka::MacsecFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::mka::mka_structs_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::directionIngress, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ucastUncontrolledPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::ucastControlledPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::mcastUncontrolledPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::mcastControlledPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::bcastUncontrolledPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::bcastControlledPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::controlPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::untaggedPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::otherErrPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::octetsUncontrolled, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::octetsControlled, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outCommonOctets, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outTooLongPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inTaggedControlledPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inNoTagPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inBadTagPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::noSciPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::unknownSciPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::overrunPkts, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::mka::MacsecFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(directionIngress);
    STRUCT_CHILD_GETTERS(ucastUncontrolledPkts);
    STRUCT_CHILD_GETTERS(ucastControlledPkts);
    STRUCT_CHILD_GETTERS(mcastUncontrolledPkts);
    STRUCT_CHILD_GETTERS(mcastControlledPkts);
    STRUCT_CHILD_GETTERS(bcastUncontrolledPkts);
    STRUCT_CHILD_GETTERS(bcastControlledPkts);
    STRUCT_CHILD_GETTERS(controlPkts);
    STRUCT_CHILD_GETTERS(untaggedPkts);
    STRUCT_CHILD_GETTERS(otherErrPkts);
    STRUCT_CHILD_GETTERS(octetsUncontrolled);
    STRUCT_CHILD_GETTERS(octetsControlled);
    STRUCT_CHILD_GETTERS(outCommonOctets);
    STRUCT_CHILD_GETTERS(outTooLongPkts);
    STRUCT_CHILD_GETTERS(inTaggedControlledPkts);
    STRUCT_CHILD_GETTERS(inNoTagPkts);
    STRUCT_CHILD_GETTERS(inBadTagPkts);
    STRUCT_CHILD_GETTERS(noSciPkts);
    STRUCT_CHILD_GETTERS(unknownSciPkts);
    STRUCT_CHILD_GETTERS(overrunPkts);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::int16_t, ::std::int64_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::int16_t, ::std::int64_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent>;
  using Child = Path<::std::int64_t, ::facebook::fboss::fsdb::FsdbOperStatsRoot, ::apache::thrift::type_class::integral, Self>;

  explicit ChildThriftPath<::std::map<::std::int16_t, ::std::int64_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::int16_t, ::std::int64_t>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int16_t);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::facebook::fboss::phy::PhyStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::facebook::fboss::phy::PhyStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::phy::PhyStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::facebook::fboss::phy::PhyStats>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::facebook::fboss::phy::PhyStats>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::MacsecSciFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::MacsecSciFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::MacsecSciFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::sci, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<strings::flowStats, ChildThriftPath<::facebook::fboss::mka::MacsecFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::mka::MKASci, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, ChildThriftPath<::facebook::fboss::mka::MacsecFlowStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::MacsecSciFlowStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(sci);
    STRUCT_CHILD_GETTERS(flowStats);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwResourceStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwResourceStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwResourceStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::hw_table_stats_stale, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_host_max, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_host_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_host_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_ipv4_host_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_ipv4_host_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_ipv6_host_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_ipv6_host_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_nexthops_max, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_nexthops_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_nexthops_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_ipv4_nexthops_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_ipv6_nexthops_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_ecmp_groups_max, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_ecmp_groups_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_ecmp_groups_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::l3_ecmp_group_members_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lpm_ipv4_max, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lpm_ipv4_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lpm_ipv4_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lpm_ipv6_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lpm_ipv6_mask_0_64_max, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lpm_ipv6_mask_0_64_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lpm_ipv6_mask_0_64_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lpm_ipv6_mask_65_127_max, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lpm_ipv6_mask_65_127_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lpm_ipv6_mask_65_127_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lpm_slots_max, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lpm_slots_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::lpm_slots_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::acl_entries_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::acl_entries_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::acl_entries_max, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::acl_counters_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::acl_counters_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::acl_counters_max, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::acl_meters_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::acl_meters_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::acl_meters_max, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::mirrors_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::mirrors_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::mirrors_max, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::mirrors_span, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::mirrors_erspan, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::mirrors_sflow, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::em_entries_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::em_entries_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::em_entries_max, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::em_counters_used, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::em_counters_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::em_counters_max, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::system_ports_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::voqs_free, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<bool, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 24>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 25>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 26>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 27>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 28>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 29>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 30>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 31>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 32>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 33>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 34>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 35>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 36>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 37>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 38>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 39>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 40>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 41>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 42>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 43>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 44>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 45>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 46>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 47>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 48>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 49>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 50>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 51>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 52>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 53>, Child<::std::int32_t, ::apache::thrift::type_class::integral>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::HwResourceStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(hw_table_stats_stale);
    STRUCT_CHILD_GETTERS(l3_host_max);
    STRUCT_CHILD_GETTERS(l3_host_used);
    STRUCT_CHILD_GETTERS(l3_host_free);
    STRUCT_CHILD_GETTERS(l3_ipv4_host_used);
    STRUCT_CHILD_GETTERS(l3_ipv4_host_free);
    STRUCT_CHILD_GETTERS(l3_ipv6_host_used);
    STRUCT_CHILD_GETTERS(l3_ipv6_host_free);
    STRUCT_CHILD_GETTERS(l3_nexthops_max);
    STRUCT_CHILD_GETTERS(l3_nexthops_used);
    STRUCT_CHILD_GETTERS(l3_nexthops_free);
    STRUCT_CHILD_GETTERS(l3_ipv4_nexthops_free);
    STRUCT_CHILD_GETTERS(l3_ipv6_nexthops_free);
    STRUCT_CHILD_GETTERS(l3_ecmp_groups_max);
    STRUCT_CHILD_GETTERS(l3_ecmp_groups_used);
    STRUCT_CHILD_GETTERS(l3_ecmp_groups_free);
    STRUCT_CHILD_GETTERS(l3_ecmp_group_members_free);
    STRUCT_CHILD_GETTERS(lpm_ipv4_max);
    STRUCT_CHILD_GETTERS(lpm_ipv4_used);
    STRUCT_CHILD_GETTERS(lpm_ipv4_free);
    STRUCT_CHILD_GETTERS(lpm_ipv6_free);
    STRUCT_CHILD_GETTERS(lpm_ipv6_mask_0_64_max);
    STRUCT_CHILD_GETTERS(lpm_ipv6_mask_0_64_used);
    STRUCT_CHILD_GETTERS(lpm_ipv6_mask_0_64_free);
    STRUCT_CHILD_GETTERS(lpm_ipv6_mask_65_127_max);
    STRUCT_CHILD_GETTERS(lpm_ipv6_mask_65_127_used);
    STRUCT_CHILD_GETTERS(lpm_ipv6_mask_65_127_free);
    STRUCT_CHILD_GETTERS(lpm_slots_max);
    STRUCT_CHILD_GETTERS(lpm_slots_used);
    STRUCT_CHILD_GETTERS(lpm_slots_free);
    STRUCT_CHILD_GETTERS(acl_entries_used);
    STRUCT_CHILD_GETTERS(acl_entries_free);
    STRUCT_CHILD_GETTERS(acl_entries_max);
    STRUCT_CHILD_GETTERS(acl_counters_used);
    STRUCT_CHILD_GETTERS(acl_counters_free);
    STRUCT_CHILD_GETTERS(acl_counters_max);
    STRUCT_CHILD_GETTERS(acl_meters_used);
    STRUCT_CHILD_GETTERS(acl_meters_free);
    STRUCT_CHILD_GETTERS(acl_meters_max);
    STRUCT_CHILD_GETTERS(mirrors_used);
    STRUCT_CHILD_GETTERS(mirrors_free);
    STRUCT_CHILD_GETTERS(mirrors_max);
    STRUCT_CHILD_GETTERS(mirrors_span);
    STRUCT_CHILD_GETTERS(mirrors_erspan);
    STRUCT_CHILD_GETTERS(mirrors_sflow);
    STRUCT_CHILD_GETTERS(em_entries_used);
    STRUCT_CHILD_GETTERS(em_entries_free);
    STRUCT_CHILD_GETTERS(em_entries_max);
    STRUCT_CHILD_GETTERS(em_counters_used);
    STRUCT_CHILD_GETTERS(em_counters_free);
    STRUCT_CHILD_GETTERS(em_counters_max);
    STRUCT_CHILD_GETTERS(system_ports_free);
    STRUCT_CHILD_GETTERS(voqs_free);
};

template<typename Parent>
class ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::map<::std::string, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   Parent> {
 public:
  using Self = Path<
   ::std::map<::std::string, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   Parent>;
  using Child = ChildThriftPath<::std::vector<::std::int32_t>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;

  explicit ChildThriftPath<::std::map<::std::string, ::std::vector<::std::int32_t>>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::map<::std::string, ::std::vector<::std::int32_t>>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::string);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::HwTrunkStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::HwTrunkStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::HwTrunkStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::hardware_stats_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::capacity_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inBytes_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inUnicastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inMulticastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inBroadcastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inPause_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inIpv4HdrErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inIpv6HdrErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inDstNullDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::inDiscardsRaw_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outBytes_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outUnicastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outMulticastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outBroadcastPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outDiscards_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outErrors_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outPause_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outCongestionDiscardPkts_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::outEcnCounter_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::wredDroppedPackets_, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<strings::macsecStats, ChildThriftPath<::facebook::fboss::MacsecStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 2>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 3>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 4>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 5>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 6>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 7>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 8>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 9>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 10>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 11>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 12>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 13>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 14>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 15>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 16>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 17>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 18>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 19>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 20>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 21>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 22>, Child<::std::int64_t, ::apache::thrift::type_class::integral>>,
   std::pair<std::integral_constant<apache::thrift::field_id_t, 23>, ChildThriftPath<::facebook::fboss::MacsecStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::HwTrunkStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(capacity_);
    STRUCT_CHILD_GETTERS(inBytes_);
    STRUCT_CHILD_GETTERS(inUnicastPkts_);
    STRUCT_CHILD_GETTERS(inMulticastPkts_);
    STRUCT_CHILD_GETTERS(inBroadcastPkts_);
    STRUCT_CHILD_GETTERS(inDiscards_);
    STRUCT_CHILD_GETTERS(inErrors_);
    STRUCT_CHILD_GETTERS(inPause_);
    STRUCT_CHILD_GETTERS(inIpv4HdrErrors_);
    STRUCT_CHILD_GETTERS(inIpv6HdrErrors_);
    STRUCT_CHILD_GETTERS(inDstNullDiscards_);
    STRUCT_CHILD_GETTERS(inDiscardsRaw_);
    STRUCT_CHILD_GETTERS(outBytes_);
    STRUCT_CHILD_GETTERS(outUnicastPkts_);
    STRUCT_CHILD_GETTERS(outMulticastPkts_);
    STRUCT_CHILD_GETTERS(outBroadcastPkts_);
    STRUCT_CHILD_GETTERS(outDiscards_);
    STRUCT_CHILD_GETTERS(outErrors_);
    STRUCT_CHILD_GETTERS(outPause_);
    STRUCT_CHILD_GETTERS(outCongestionDiscardPkts_);
    STRUCT_CHILD_GETTERS(outEcnCounter_);
    STRUCT_CHILD_GETTERS(wredDroppedPackets_);
    STRUCT_CHILD_GETTERS(macsecStats);
};


template<typename Parent>
class ChildThriftPath<::facebook::fboss::phy::PcsStats, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::facebook::fboss::phy::PcsStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent> {
 public:
  using Self = Path<
   ::facebook::fboss::phy::PcsStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>;
  using strings = ::facebook::fboss::phy::phy_tags::strings;
  template <typename ChildType, typename ChildTC>
  using Child = Path<
    ChildType,
    ::facebook::fboss::fsdb::FsdbOperStatsRoot,
    ChildTC,
    Self
  >;
  using Children = fatal::tuple<   std::pair<strings::rsFec, ChildThriftPath<::facebook::fboss::phy::RsFecInfo, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;
  using ChildrenById = fatal::tuple<   std::pair<std::integral_constant<apache::thrift::field_id_t, 1>, ChildThriftPath<::facebook::fboss::phy::RsFecInfo, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>>>;

  template <typename Name>
  using TypeFor = typename Children::template type_of<Name>;

  explicit ChildThriftPath(
     std::vector<std::string> tokens = {}) : Path<
   ::facebook::fboss::phy::PcsStats,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::structure,
   Parent>(std::move(tokens)) {}
  
    STRUCT_CHILD_GETTERS(rsFec);
};

template<typename Parent>
class ChildThriftPath<::std::vector<::facebook::fboss::phy::EyeInfo>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent> :
  public Path<
   ::std::vector<::facebook::fboss::phy::EyeInfo>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent> {
 public:
  using Self = Path<
   ::std::vector<::facebook::fboss::phy::EyeInfo>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>;
  using Child = ChildThriftPath<::facebook::fboss::phy::EyeInfo, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Self>;

  explicit ChildThriftPath<::std::vector<::facebook::fboss::phy::EyeInfo>, ::facebook::fboss::fsdb::FsdbOperStatsRoot, Parent>(
     std::vector<std::string> tokens = {}) : Path<
   ::std::vector<::facebook::fboss::phy::EyeInfo>,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
   Parent>(std::move(tokens)) {}

  CONTAINER_CHILD_GETTERS(::std::int32_t);
};



template<>
class RootThriftPath<::facebook::fboss::fsdb::FsdbOperStatsRoot> :
  public ChildThriftPath<
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   ::facebook::fboss::fsdb::FsdbOperStatsRoot,
   folly::Unit> {};


} // namespace thriftpath
// clang-format on
